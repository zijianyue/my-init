;;-----------------------------------------------------------外观-----------------------------------------------------------;;
;; 字体保证中文是英文的两倍宽
;; Setting English Font

(package-initialize)

(set-face-attribute
 'default nil :font "Consolas 11")

;; 新开的窗口保持字体
(add-to-list 'default-frame-alist '(font . "Consolas 11"))

;;Chinese Font
(dolist (charset '(kana han symbol cjk-misc bopomofo))
  (set-fontset-font (frame-parameter nil 'font)
					charset
					(font-spec :family "宋体" :size 16)))

(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
;; spacemacs theme setting
(setq spacemacs-theme-comment-bg nil)
(setq spacemacs-theme-org-height nil)
;; (require 'color-theme-sanityinc-tomorrow)
;; (require 'color-theme-sanityinc-solarized)
;;-----------------------------------------------------------设置-----------------------------------------------------------;;
;; 只有一个实例
(server-force-delete)
(server-start)

;; 环境变量
(setenv "MSYS" "C:\\MinGW\\msys\\1.0\\bin")
(setenv "MINGW" "C:\\MinGW\\bin")
(setenv "PUTTY" "C:\\Program Files (x86)\\PuTTY")
(setenv "LLVM" "C:\\Program Files (x86)\\LLVM\\bin")
(setenv "CMAKE" "C:\\Program Files (x86)\\CMake\\bin")
(setenv "GTAGSBIN" "c:\\gtags\\bin")
(setenv "PYTHON" "C:\\Python27")		;用27的话ycmd可以使用semantic补全
(setenv "CYGWIN" "C:\\cygwin\\bin")
(setenv "CPPCHECK" "C:\\Program Files (x86)\\Cppcheck")
;; (setenv "LC_ALL" "C")			   ;for diff-hl in emacs25
;; (setenv "GTAGSLABEL" "pygments")

(setq python-shell-prompt-detect-enabled nil) ;用python27时需要加这个不然有warning
(setq python-shell-completion-native-enable nil) ;用python27时需要加这个不然有warning

(setenv "PATH"
		(concat
		 (getenv "PYTHON")
		 path-separator
		 (getenv "MSYS")
		 path-separator
		 (getenv "MINGW")
		 path-separator
		 (getenv "PUTTY")
		 path-separator
		 (getenv "LLVM")
		 path-separator
		 (getenv "CMAKE")
		 path-separator
		 (getenv "GTAGSBIN")
		 path-separator
		 (getenv "CYGWIN")
		 path-separator
		 (getenv "CPPCHECK")
		 path-separator
		 (getenv "PATH")))

(add-to-list 'exec-path (getenv "PYTHON") t)
(add-to-list 'exec-path (getenv "MINGW") t)
(add-to-list 'exec-path (getenv "MSYS") t)
(add-to-list 'exec-path (getenv "LLVM") t)
(add-to-list 'exec-path (getenv "CMAKE") t)
(add-to-list 'exec-path (getenv "GTAGSBIN") t)
(add-to-list 'exec-path (getenv "CYGWIN") t)
(add-to-list 'exec-path (getenv "CPPCHECK") t)


(defvar site-lisp-dir)
(if (and (eq emacs-minor-version 3)
		 (eq emacs-major-version 24))
	(setq site-lisp-dir (concat (getenv "emacs_dir") "\\site-lisp"))
  (setq site-lisp-dir (concat (getenv "emacs_dir") "\\share\\emacs\\site-lisp")))

;; windows的find跟gnu 的grep有冲突
(setq find-program (concat "\"" (getenv "MSYS") "\\find.exe\""))
(setq grep-program "grep -nH -F")		;-F按普通字符串搜索
;; 默认目录
(setq default-directory "d:/")

;; 启动mode
(setq initial-major-mode 'text-mode)

;; elpa
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
						 ("marmalade" . "http://marmalade-repo.org/packages/")
						 ("melpa" . "http://melpa.milkbox.net/packages/")
						 ("melpa-stable" . "http://melpa-stable.milkbox.net/packages/")))
;; mini buffer 的大小保持不变
;; (setq resize-mini-windows nil)
;; 没有提示音,也不闪屏
(setq ring-bell-function 'ignore)

;; Load CEDET offical
(if (eq 24 emacs-major-version)
	(load-file "d:/cedet-git/cedet-devel-load.el") ;; Load CEDET offical
  (progn								;; cedet builtin
	(require 'semantic )
	;; (require 'semantic/decorate )
	(require 'srecode)))

;; (add-to-list 'semantic-default-submodes 'global-semantic-decoration-mode t)
;; (add-to-list 'semantic-default-submodes 'global-semantic-stickyfunc-mode t)
;; (add-to-list 'semantic-default-submodes 'global-semantic-highlight-edits-mode t)

(global-srecode-minor-mode t)
;; 设置模板路径,把模板放到"~/.emacs.d/.srecode/"，避免拷来拷去
(setq srecode-map-load-path (list (expand-file-name "~/.emacs.d/.srecode/")
								  (srecode-map-base-template-dir)
								  ))
(semantic-mode t)
(global-ede-mode t)
(setq semantic-c-obey-conditional-section-parsing-flag nil) ; ignore #ifdef
;; let cedet call ctags to find things which cedet can not find
;; (semantic-load-enable-all-ectags-support)
;; (semantic-load-enable-primary-ectags-support)
;; (semantic-ectags-add-language-support lua-mode "lua" "f")
;; (add-hook 'lua-mode-hook 'semantic-ectags-simple-setup)

;; (semanticdb-enable-gnu-global-databases 'c-mode) ;;会导致访问\\这种目录中的文件并且里面没有GTAGS文件时挂死
;; (semanticdb-enable-gnu-global-databases 'c++-mode)
(set-default 'semantic-case-fold t)
;; (setq semantic-c-takeover-hideif t)		;帮助hideif识别#if
;; (setq ede-locate-setup-options (quote (ede-locate-global ede-locate-idutils))) ;用gtags帮助cedet找头文件

;; (global-set-key (kbd "M-n") 'semantic-ia-show-summary)
;; semantic-ia-show-doc 备用

;;修改标题栏，显示buffer的名字
(setq frame-title-format "%b [%+] %f")
(setq icon-title-format "%b [%+] %f")

;; 改变 Emacs 固执的要你回答 yes 的行为。按 y 或空格键表示 yes，n 表示 no。
(fset 'yes-or-no-p 'y-or-n-p)

;; 不折行，影响性能
(set-default 'truncate-lines t)
;; (setq truncate-partial-width-windows nil) ;; 左右分屏时折行
;; (if (eq 25 emacs-major-version)
;; 	(horizontal-scroll-bar-mode 1))

;; 自动横移跟随水平滚动条切换
(defadvice horizontal-scroll-bar-mode(after horizontal-scroll-bar-mode-after activate)
  (if horizontal-scroll-bar-mode
	  (setq auto-hscroll-mode nil)
	(setq auto-hscroll-mode t)))

;; 高亮单词跟高亮当前行有冲突
(defadvice highlight-symbol-at-point(after highlight-symbol-at-point-after activate)
  (if global-hl-line-mode
	  (global-hl-line-mode -1)))
(setq compile-command "devenv.com projects.sln /build \"Debug|Win32\"") ;可以传sln 或vcproj编译工程
;; tab补全时忽略大小写
(setq-default completion-ignore-case t)
;; DIRED的时间显示格式
(setq ls-lisp-format-time-list  '("%Y-%m-%d %H:%M:%S" "%Y-%m-%d %H:%M:%S")
      ls-lisp-use-localized-time-format t)
;; 优先横分割窗口
(setq split-width-threshold 9999)	;增大向右分割的要求
;; (setq split-height-threshold 0)

;; hi lock颜色
(setq hi-lock-face-defaults '("hi-yellow" "hi-pink" "hi-green" "hi-blue" "hi-black-b" "hi-blue-b" "hi-red-b" "hi-green-b"))
;; 自动添加的设置
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ac-delay 0.3)
 '(ac-disable-faces nil)
 '(ac-expand-on-auto-complete nil)
 '(ac-ignore-case t)
 '(ac-trigger-key "TAB")
 '(ac-use-fuzzy t)
 '(ac-use-menu-map t)
 '(ad-redefinition-action (quote accept))
 '(ag-highlight-search t)
 '(auto-save-default nil)
 '(autopair-blink nil)
 '(aw-scope (quote frame))
 '(back-button-local-keystrokes nil)
 '(back-button-mode-lighter "")
 '(backward-delete-char-untabify-method nil)
 '(bookmark-save-flag 1)
 '(bookmark-sort-flag nil)
 '(c-electric-pound-behavior (quote (alignleft)))
 '(cc-search-directories (quote ("." "/usr/include" "/usr/local/include/*" "../*")))
 '(column-number-mode t)
 '(company-dabbrev-downcase nil)
 '(company-dabbrev-ignore-case t)
 '(company-dabbrev-other-buffers t)
 '(company-idle-delay 0)
 '(company-show-numbers t)
 '(company-tooltip-align-annotations t)
 '(company-transformers (quote (company-sort-by-occurrence)))
 '(company-ycmd-request-sync-timeout 0)
 '(compilation-message-face (quote default))
 '(compilation-scroll-output t)
 '(compilation-skip-threshold 2)
 '(confirm-kill-emacs (quote y-or-n-p))
 '(cua-mode t nil (cua-base))
 '(cursor-type t)
 '(custom-enabled-themes (quote (spacemacs-light)))
 '(custom-safe-themes
   (quote
	("4cf3221feff536e2b3385209e9b9dc4c2e0818a69a1cdb4b522756bcdf4e00a4" "4aee8551b53a43a883cb0b7f3255d6859d766b6c5e14bcb01bed572fcbef4328" "06f0b439b62164c6f8f84fdda32b62fb50b6d00e8b01c2208e55543a6337433a" "628278136f88aa1a151bb2d6c8a86bf2b7631fbea5f0f76cba2a0079cd910f7d" "bb08c73af94ee74453c90422485b29e5643b73b05e8de029a6909af6a3fb3f58" "82d2cac368ccdec2fcc7573f24c3f79654b78bf133096f9b40c20d97ec1d8016" "1b8d67b43ff1723960eb5e0cba512a2c7a2ad544ddb2533a90101fd1852b426e" "c924950f6b5b92a064c5ad7063bb34fd3facead47cd0d761a31e7e76252996f7" "72ac74b21322d3b51235f3b709c43c0721012e493ea844a358c7cd4d57857f1f" "8db4b03b9ae654d4a57804286eb3e332725c84d7cdab38463cb6b97d5762ad26" "fa2b58bb98b62c3b8cf3b6f02f058ef7827a8e497125de0254f56e373abee088" "bffa9739ce0752a37d9b1eee78fc00ba159748f50dc328af4be661484848e476" "92cfc474738101780aafd15a378bb22476af6e8573daa8031a9e4406b69b9eb8" default)))
 '(delete-by-moving-to-trash t)
 '(diff-hl-flydiff-delay 4)
 '(dired-dwim-target t)
 '(dired-listing-switches "-alh")
 '(dired-recursive-copies (quote always))
 '(dired-recursive-deletes (quote always))
 '(ediff-split-window-function (quote split-window-horizontally))
 '(electric-indent-mode t)
 '(electric-pair-mode t)
 '(enable-local-variables :all)
 '(eww-search-prefix "http://cn.bing.com/search?q=")
 '(explicit-shell-file-name "bash")
 '(fa-insert-method (quote name-and-parens-and-hint))
 '(fci-eol-char 32)
 '(fci-rule-color "#49483E")
 '(fill-column 120)
 '(flycheck-check-syntax-automatically nil)
 '(flycheck-checker-error-threshold nil)
 '(flycheck-emacs-lisp-load-path (quote inherit))
 '(flycheck-indication-mode (quote right-fringe))
 '(flycheck-navigation-minimum-level (quote error))
 '(flymake-fringe-indicator-position (quote right-fringe))
 '(frame-resize-pixelwise t)
 '(ggtags-highlight-tag nil)
 '(ggtags-highlight-tag-delay 16)
 '(git-commit-fill-column 200)
 '(git-commit-style-convention-checks nil)
 '(git-commit-summary-max-length 200)
 '(git-gutter:handled-backends (quote (git hg bzr svn)))
 '(git-gutter:update-interval 2)
 '(global-auto-revert-mode t)
 '(global-diff-hl-mode nil)
 '(global-eldoc-mode nil)
 '(global-hl-line-sticky-flag t)
 '(grep-template "grep <X> <C> -nH -F <R> <F>")
 '(gtags-ignore-case nil)
 '(helm-ag-base-command "ag --nocolor --nogroup -S -Q ")
 '(helm-ag-fuzzy-match t)
 '(helm-allow-mouse t)
 '(helm-always-two-windows t)
 '(helm-buffer-max-length 40)
 '(helm-candidate-number-limit 2000)
 '(helm-case-fold-search t)
 '(helm-for-files-preferred-list
   (quote
    (helm-source-buffers-list helm-source-bookmarks helm-source-recentf)))
 '(helm-gtags-auto-update t)
 '(helm-gtags-cache-max-result-size 504857600)
 '(helm-gtags-cache-select-result t)
 '(helm-gtags-ignore-case t)
 '(helm-gtags-maximum-candidates 2000)
 '(helm-gtags-suggested-key-mapping t)
 '(helm-gtags-update-interval-second 3)
 '(helm-semantic-display-style
   (quote
    ((python-mode . semantic-format-tag-summarize)
     (c-mode . semantic-format-tag-uml-prototype-default)
     (emacs-lisp-mode . semantic-format-tag-abbreviate-emacs-lisp-mode))))
 '(helm-truncate-lines t t)
 '(highlight-changes-colors (quote ("#FD5FF0" "#AE81FF")))
 '(highlight-tail-colors
   (quote
    (("#49483E" . 0)
     ("#679A01" . 20)
     ("#4BBEAE" . 30)
     ("#1DB4D0" . 50)
     ("#9A8F21" . 60)
     ("#A75B00" . 70)
     ("#F309DF" . 85)
     ("#49483E" . 100))))
 '(history-window-local-history t)
 '(icomplete-show-matches-on-no-input t)
 '(ido-mode (quote both) nil (ido))
 '(imenu-max-item-length 120)
 '(imenu-max-items 1000)
 '(inhibit-startup-screen t)
 '(isearch-allow-scroll t)
 '(jit-lock-context-time 1.5)
 '(jit-lock-defer-time 0.5)
 '(large-file-warning-threshold 40000000)
 '(ls-lisp-verbosity nil)
 '(magit-log-arguments (quote ("-n32" "--stat")))
 '(magit-log-margin (quote (t "%Y-%m-%d %H:%M " magit-log-margin-width t 18)))
 '(make-backup-files nil)
 '(menu-bar-mode nil)
 '(mode-require-final-newline nil)
 '(moo-select-method (quote helm))
 '(mouse-wheel-progressive-speed nil)
 '(org-download-method (quote attach))
 '(org-download-screenshot-method "gm import %s")
 '(org-log-done (quote time))
 '(org-src-fontify-natively t)
 '(password-cache-expiry nil)
 '(pcmpl-gnu-tarfile-regexp "")
 '(powerline-default-separator (quote box))
 '(powerline-gui-use-vcs-glyph t)
 '(recentf-auto-cleanup 600)
 '(rscope-keymap-prefix "p")
 '(save-place t nil (saveplace))
 '(semantic-c-dependency-system-include-path
   (quote
	("C:/Program Files (x86)/Microsoft Visual Studio 8/VC/include" "C:/Program Files (x86)/Microsoft Visual Studio 8/VC/PlatformSDK/Include" "C:/Program Files (x86)/Microsoft Visual Studio 8/VC/atlmfc/include" "C:/Program Files (x86)/Microsoft Visual Studio 8/SDK/v2.0/include" "C:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include" "C:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/atlmfc/include" "C:/cygwin/usr/include" "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include" "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/atlmfc/include" "C:/Program Files (x86)/Windows Kits/10/Include/10.0.10150.0/ucrt" "C:/Program Files (x86)/Windows Kits/8.1/Include/um" "C:/Program Files (x86)/Windows Kits/8.1/Include/shared" "C:/Program Files (x86)/Windows Kits/8.1/Include/winrt")))
 '(semantic-idle-scheduler-idle-time 15)
 '(semantic-idle-scheduler-work-idle-time 600)
 '(semantic-imenu-bucketize-file nil)
 '(semantic-lex-spp-use-headers-flag t)
 '(semantic-symref-results-summary-function (quote semantic-format-tag-abbreviate))
 '(semanticdb-default-save-directory "d:\\semanticdb")
 '(shell-completion-execonly nil)
 '(show-paren-mode t)
 '(show-paren-when-point-in-periphery t)
 '(show-paren-when-point-inside-paren t)
 '(size-indication-mode t)
 '(sln-mode-devenv-2008 "Devenv.com")
 '(switch-window-shortcut-style (quote (quote qwerty)))
 '(tab-width 4)
 '(tabbar-cycle-scope (quote tabs))
 '(tabbar-ruler-excluded-buffers
   (quote
    ("*Messages*" "*Completions*" "*ESS*" "*Packages*" "*log-edit-files*" "*helm-mini*" "*helm-mode-describe-variable*" "*helm for files*" "*helm gtags*" "*Ilist*" "*taglist\"\"")))
 '(tabbar-ruler-fancy-close-image t)
 '(tabbar-ruler-fancy-current-tab-separator (quote inherit))
 '(tabbar-ruler-fancy-tab-separator nil)
 '(tabbar-ruler-pad-selected nil)
 '(tabbar-ruler-tab-height nil)
 '(tabbar-ruler-tab-padding nil)
 '(tool-bar-mode nil)
 '(undo-outer-limit 20000000)
 '(uniquify-buffer-name-style (quote post-forward-angle-brackets) nil (uniquify))
 '(user-full-name "gezijian")
 '(vc-svn-program "C:\\Program Files\\TortoiseSVN\\bin\\svn")
 '(vlf-batch-size 10000000)
 '(which-function-mode t)
 '(whitespace-line-column 120)
 '(winner-mode t)
 '(yas-also-auto-indent-first-line t)
 '(ycmd-confirm-fixit nil)
 '(ycmd-delete-process-delay 15)
 '(ycmd-file-type-map
   (quote
    ((c++-mode "cpp")
     (c-mode "c")
     (caml-mode "ocaml")
     (csharp-mode "cs")
     (d-mode "d")
     (erlang-mode "erlang")
     (go-mode "go")
     (js-mode "javascript")
     (js2-mode "javascript")
     (objc-mode "objc")
     (perl-mode "perl")
     (cperl-mode "perl")
     (php-mode "php")
     (ruby-mode "ruby")
     (rust-mode "rust")
     (scala-mode "scala")
     (tuareg-mode "ocaml")
     (typescript-mode "typescript"))))
 '(ycmd-idle-change-delay 5)
 '(ycmd-parse-conditions (quote (save mode-enabled buffer-focus)))
 '(ycmd-seed-identifiers-with-keywords t)
 '(ycmd-startup-timeout 20))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(dired-async-message ((t (:foreground "indian red"))))
 '(dired-async-mode-message ((t (:foreground "chocolate"))))
 '(helm-lisp-show-completion ((t (:background "navajo white"))))
 '(helm-selection-line ((t (:background "light steel blue" :underline t))))
 '(zjl-hl-local-variable-reference-face ((t (:foreground "dark slate gray"))))
 '(zjl-hl-member-reference-face ((t (:foreground "dark goldenrod" :slant normal :weight normal)))))
;;-----------------------------------------------------------plugin begin-----------------------------------------------------------;;
;; gtags
(setq gtags-suggested-key-mapping nil)
(setq gtags-disable-pushy-mouse-mapping t)
(autoload 'gtags-mode "gtags" nil t)
(eval-after-load "gtags"
  '(progn
	 (define-key gtags-mode-map [C-down-mouse-1] 'ignore)
	 (define-key gtags-mode-map [C-down-mouse-3] 'ignore)
	 (define-key gtags-mode-map [mouse-3] 'ignore)
	 (define-key gtags-mode-map [mouse-2] 'gtags-find-tag-by-event)
	 (define-key gtags-mode-map (kbd "<C-mouse-3>") 'gtags-pop-stack)
	 (define-key gtags-mode-map (kbd "<mouse-3>") 'gtags-pop-stack)
	 (define-key gtags-mode-map (kbd "<C-mouse-1>") 'gtags-find-tag-by-event)
	 (define-key gtags-mode-map (kbd "C-c i") 'gtags-find-with-idutils)
	 (define-key gtags-select-mode-map "p" 'previous-line)
	 (define-key gtags-select-mode-map "n" 'next-line)
	 (define-key gtags-select-mode-map "q" 'gtags-pop-stack)
	 (define-key gtags-select-mode-map [C-down-mouse-3] 'ignore)
	 (define-key gtags-select-mode-map [mouse-3] 'ignore)
	 (define-key gtags-select-mode-map [C-down-mouse-1] 'ignore)
	 (define-key gtags-select-mode-map [mouse-2] 'gtags-select-tag-by-event)
	 (define-key gtags-select-mode-map (kbd "<C-mouse-3>") 'gtags-pop-stack)
	 (define-key gtags-select-mode-map (kbd "<mouse-3>") 'gtags-pop-stack)
	 (define-key gtags-select-mode-map (kbd "<C-mouse-1>") 'gtags-select-tag-by-event)
	 ))

;; ggtags
(with-eval-after-load 'ggtags
  (defalias 'ggtags-after-save-function 'ignore))
(autoload 'ggtags-mode "ggtags" "" t)
(eval-after-load "ggtags"
  '(progn
	 (remove-function (local 'eldoc-documentation-function) 'ggtags-eldoc-function)
	 (define-key ggtags-mode-map (kbd "M-.") nil)
	 (define-key ggtags-mode-map (kbd "M-,") nil)
	 ;; (define-key ggtags-mode-map (kbd "M-]") 'ggtags-find-tag-dwim)
	 ;; (define-key ggtags-mode-map (kbd "C-M-]") 'ggtags-find-reference)
	 (define-key ggtags-mode-map (kbd "C-M-.") nil)
	 (define-key ggtags-mode-map [S-down-mouse-1] 'ignore)
	 (define-key ggtags-mode-map [S-down-mouse-3] 'ignore)
	 ;; (define-key ggtags-mode-map (kbd "<S-mouse-1>") 'ggtags-find-tag-mouse)
	 ;; (define-key ggtags-mode-map (kbd "<S-mouse-3>") 'ggtags-prev-mark)
	 ;; (define-key ggtags-mode-map (kbd "<C-S-mouse-3>") 'ggtags-next-mark)
	 (define-key ggtags-highlight-tag-map [S-down-mouse-1] 'ignore)
	 (define-key ggtags-highlight-tag-map [S-down-mouse-3] 'ignore)
	 ;; (define-key ggtags-highlight-tag-map (kbd "<S-mouse-1>") 'ggtags-find-tag-mouse)
	 ;; (define-key ggtags-highlight-tag-map (kbd "<S-mouse-3>") 'ggtags-prev-mark)
	 ;; (define-key ggtags-highlight-tag-map (kbd "<C-S-mouse-3>") 'ggtags-next-mark)
	 (define-key ggtags-mode-map (kbd "M-P") 'ggtags-show-definition)
	 ;; (define-key ggtags-highlight-tag-map (kbd "<mouse-2>") 'ggtags-show-definition)
	 ;; (define-key ggtags-mode-map (kbd "C-c p") 'ggtags-find-file)
	 (setq ggtags-mode-line-project-name nil)
	 (setq ggtags-update-on-save nil)
	 ;; (setq imenu-create-index-function #'ggtags-build-imenu-index)
	 ))

;; 选中单位
(autoload 'er/expand-region "expand-region" nil t)
(global-set-key (kbd "M-s") 'er/expand-region)

;; undo redo
(require 'redo+)
(setq undo-no-redo t)
(global-set-key (kbd "C-/") 'redo)

;; stl(解析vector map等)
(setq stl-base-dir "c:/Program Files (x86)/Microsoft Visual Studio 8/VC/include")
(setq stl-base-dir-12 "c:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include")
(setq stl-base-dir-11 "c:/Program Files (x86)/Microsoft Visual Studio 11.0/VC/include")

;; 设置成c++文件类型
(add-to-list 'auto-mode-alist (cons stl-base-dir 'c++-mode))
(add-to-list 'auto-mode-alist (cons stl-base-dir-12 'c++-mode))
(add-to-list 'auto-mode-alist (cons stl-base-dir-11 'c++-mode))
;; (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.hpp\\'" . c++-mode))

;; 工程设置
(defun create-spec-ede-project (root-file known)
  (when (file-exists-p root-file)
	(if known
		(ede-cpp-root-project "code" :file root-file
							  :include-path '( "/include" "/server" "/upf"
											   "/upf_dubhe/export" "/UPF_SMI/Include" "/Service/TG/MM/RM/Source/PMM")
							  :spp-files '( "Service/TG/MM/RM/Source/PMM/RMPmm_Const.h"
											"Service/TG/MM/RM/Include/RM_switch.h"
											"Service/TG/MM/RM/Include/RM_Debug.h"
											"ede_switch.h" ;ON OFF宏写成(1)(0)的话不能识别
											)
							  :spp-table '(("IN" . "")
										   ("OUT" . "")
										   ("INOUT" . "") ;如果在函数参数前加上这样的宏会导致无法识别
										   ))
	  (ede-cpp-root-project "code" :file root-file))))

(defun create-known-ede-project(&optional select)
  (interactive "P")
  (if select
	  (setq root-file (read-file-name "Open a root file in proj: "))
	(setq root-file "./GTAGS"))
  (create-spec-ede-project root-file t)
  ;; (find-sln root-file)
