;;-----------------------------------------------------------外观-----------------------------------------------------------;;
;; 字体保证中文是英文的两倍宽
;; Setting English Font
(set-face-attribute
 'default nil :font "Consolas 11")

;; 新开的窗口保持字体
(add-to-list 'default-frame-alist '(font . "Consolas 11"))

;;Chinese Font
(dolist (charset '(kana han symbol cjk-misc bopomofo))
  (set-fontset-font (frame-parameter nil 'font)
					charset
					(font-spec :family "宋体" :size 16)))

(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
;;-----------------------------------------------------------设置-----------------------------------------------------------;;
;; 只有一个实例
(server-force-delete)
(server-start)

;; 环境变量
;; (setenv "MSYS" "C:\\msys\\bin")
(setenv "MSYS" "C:\\MinGW\\msys\\1.0\\bin")
(setenv "MINGW" "C:\\MinGW\\bin")
(setenv "PUTTY" "C:\\Program Files (x86)\\PuTTY")
(setenv "LLVM" "C:\\Program Files (x86)\\LLVM\\bin")
(setenv "CMAKE" "C:\\Program Files (x86)\\CMake\\bin")
(setenv "GTAGSBIN" "c:\\gtags\\bin")
(setenv "PYTHON" "C:\\Python34")		;用27的话ycmd可以使用semantic补全
(setenv "CYGWIN" "C:\\cygwin\\bin")
(setenv "CPPCHECK" "C:\\Program Files (x86)\\Cppcheck")
;; (setenv "LC_ALL" "C")			   ;for diff-hl in emacs25
;; (setenv "GTAGSLABEL" "pygments")

;; (setq python-shell-prompt-detect-enabled nil) ;用python27时需要加这个不然有warning


(setenv "PATH"
		(concat
		 (getenv "MSYS")
		 path-separator
		 (getenv "MINGW")
		 path-separator
		 (getenv "PUTTY")
		 path-separator
		 (getenv "LLVM")
		 path-separator
		 (getenv "CMAKE")
		 path-separator
		 (getenv "GTAGSBIN")
		 path-separator
		 (getenv "PYTHON")
		 path-separator
		 (getenv "CYGWIN")
		 path-separator
		 (getenv "CPPCHECK")
		 path-separator
		 (getenv "PATH")))

(add-to-list 'exec-path (getenv "MINGW") t)
(add-to-list 'exec-path (getenv "MSYS") t)
(add-to-list 'exec-path (getenv "LLVM") t)
(add-to-list 'exec-path (getenv "CMAKE") t)
(add-to-list 'exec-path (getenv "GTAGSBIN") t)
(add-to-list 'exec-path (getenv "PYTHON") t)
(add-to-list 'exec-path (getenv "CYGWIN") t)
(add-to-list 'exec-path (getenv "CPPCHECK") t)


(defvar site-lisp-dir)
(if (and (eq emacs-minor-version 3)
		 (eq emacs-major-version 24))
	(setq site-lisp-dir (concat (getenv "emacs_dir") "\\site-lisp"))
  (setq site-lisp-dir (concat (getenv "emacs_dir") "\\share\\emacs\\site-lisp")))

;; windows的find跟gnu 的grep有冲突
(setq find-program (concat "\"" (getenv "MSYS") "\\find.exe\""))
(setq grep-program "grep -nH -F")		;-F按普通字符串搜索
;; 默认目录
(setq default-directory "~")

;; 启动mode
(setq initial-major-mode 'text-mode)

;; elpa
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
						 ("marmalade" . "http://marmalade-repo.org/packages/")
						 ("melpa" . "http://melpa.milkbox.net/packages/")
						 ("melpa-stable" . "http://melpa-stable.milkbox.net/packages/")))
;; mini buffer 的大小保持不变
;; (setq resize-mini-windows nil)
;; 没有提示音,也不闪屏
(setq ring-bell-function 'ignore)

;; Load CEDET offical
(if (eq 24 emacs-major-version)
	(load-file "d:/cedet-git/cedet-devel-load.el") ;; Load CEDET offical
  (progn								;; cedet builtin
	(require 'semantic )
	(require 'semantic/decorate )
	(require 'srecode)))

;; (add-to-list 'semantic-default-submodes 'global-semantic-decoration-mode t)
;; (add-to-list 'semantic-default-submodes 'global-semantic-stickyfunc-mode t)
;; (add-to-list 'semantic-default-submodes 'global-semantic-highlight-edits-mode t)

(global-srecode-minor-mode t)
;; 设置模板路径,把模板放到"~/.emacs.d/.srecode/"，避免拷来拷去
(setq srecode-map-load-path (list (expand-file-name "~/.emacs.d/.srecode/")
								  (srecode-map-base-template-dir)
								  ))
(semantic-mode t)
(global-ede-mode t)
(setq semantic-c-obey-conditional-section-parsing-flag nil) ; ignore #ifdef
;; let cedet call ctags to find things which cedet can not find
;; (semantic-load-enable-all-ectags-support)
;; (semantic-load-enable-primary-ectags-support)
;; (semantic-ectags-add-language-support lua-mode "lua" "f")
;; (add-hook 'lua-mode-hook 'semantic-ectags-simple-setup)

;; (semanticdb-enable-gnu-global-databases 'c-mode) ;;会导致访问\\这种目录中的文件并且里面没有GTAGS文件时挂死
;; (semanticdb-enable-gnu-global-databases 'c++-mode)
(set-default 'semantic-case-fold t)
(setq semantic-c-takeover-hideif t)		;帮助hideif识别#if
;; (setq ede-locate-setup-options (quote (ede-locate-global ede-locate-idutils))) ;用gtags帮助cedet找头文件

;; (global-set-key (kbd "M-p") 'semantic-ia-show-summary)
;; semantic-ia-show-doc 备用

;;修改标题栏，显示buffer的名字
(setq frame-title-format "%b [%+] %f")
(setq icon-title-format "%b [%+] %f")

;; 改变 Emacs 固执的要你回答 yes 的行为。按 y 或空格键表示 yes，n 表示 no。
(fset 'yes-or-no-p 'y-or-n-p)

;; vc编译设置(2005)
;; (setenv "VSINSTALLDIR" "C:\\Program Files (x86)\\Microsoft Visual Studio 8")
;; (setenv "VCINSTALLDIR" "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC")
;; (setenv "FrameworkDir" "C:\\WINDOWS\\Microsoft.NET\\Framework")
;; (setenv "FrameworkVersion" "v2.0.50727")
;; (setenv "FrameworkSDKDir" "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\SDK\\v2.0")
;; (setenv "CommonDevEnvDir" "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\Common7")
;; (setenv "DevEnvDir"
;; 		(concat (getenv "CommonDevEnvDir") "\\IDE"))
;; (setenv "PATH"
;; 		(concat (getenv "DevEnvDir")
;; 				path-separator
;; 				(concat (getenv "VCINSTALLDIR") "\\BIN")
;; 				path-separator
;; 				(concat (getenv "CommonDevEnvDir") "\\Tools")
;; 				path-separator
;; 				(concat (getenv "CommonDevEnvDir") "\\Tools\\bin")
;; 				path-separator
;; 				(concat (getenv "VCINSTALLDIR") "\\PlatformSDK\\bin")
;; 				path-separator
;; 				(concat (getenv "FrameworkSDKDir") "\\bin")
;; 				path-separator
;; 				(concat (getenv "FrameworkDir") "\\" (getenv "FrameworkVersion"))
;; 				path-separator
;; 				(concat (getenv "VCINSTALLDIR") "\\VCPackages")
;; 				path-separator
;; 				(getenv "PATH")))
;; (setenv "INCLUDE"
;; 		(concat
;; 		 (concat (getenv "VCINSTALLDIR") "\\ATLMFC\\INCLUDE")
;; 		 path-separator
;; 		 (concat (getenv "VCINSTALLDIR") "\\INCLUDE")
;; 		 path-separator
;; 		 (concat (getenv "VCINSTALLDIR") "\\PlatformSDK\\include")
;; 		 path-separator
;; 		 (concat (getenv "VSINSTALLDIR") "\\SDK\\v2.0\\include")
;; 		 path-separator
;; 		 (getenv "INCLUDE")))
;; (setenv "LIB" (concat
;; 			   (concat (getenv "VCINSTALLDIR") "\\ATLMFC\\LIB")
;; 			   path-separator
;; 			   (concat (getenv "VCINSTALLDIR") "\\LIB")
;; 			   path-separator
;; 			   (concat (getenv "VCINSTALLDIR") "\\PlatformSDK\\lib")
;; 			   path-separator
;; 			   (concat (getenv "VSINSTALLDIR") "\\SDK\\v2.0\\lib")
;; 			   path-separator
;; 			   (getenv "LIB")))
;; (setenv  "LIBPATH"
;; 		 (concat
;; 		  (concat (getenv "FrameworkDir") "\\" (getenv "FrameworkVersion"))
;; 		  path-separator
;; 		  (concat (getenv "VCINSTALLDIR") "\\ATLMFC\\LIB")))

(setq compile-command "devenv.com projects.sln /build \"Debug|Win32\"") ;可以传sln 或vcproj编译工程
;; tab补全时忽略大小写
(setq-default completion-ignore-case t)
;; DIRED的时间显示格式
(setq ls-lisp-format-time-list  '("%Y-%m-%d %H:%M:%S" "%Y-%m-%d %H:%M:%S")
      ls-lisp-use-localized-time-format t)
;; 优先横分割窗口
(setq split-width-threshold 9999)	;增大向右分割的要求
;; (setq split-height-threshold 0)

;; hi lock颜色
(setq hi-lock-face-defaults '("hi-yellow" "hi-pink" "hi-green" "hi-blue" "hi-black-b" "hi-blue-b" "hi-red-b" "hi-green-b"))
;; 自动添加的设置
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ac-disable-faces nil)
 '(ac-expand-on-auto-complete nil)
 '(ac-ignore-case t)
 '(ac-trigger-key "TAB")
 '(ac-use-fuzzy t)
 '(ac-use-menu-map t)
 '(ad-redefinition-action (quote accept))
 '(auto-save-default nil)
 '(autopair-blink nil)
 '(aw-scope (quote frame))
 '(back-button-local-keystrokes nil)
 '(back-button-mode-lighter "")
 '(backward-delete-char-untabify-method nil)
 '(bookmark-save-flag 1)
 '(bookmark-sort-flag nil)
 '(column-number-mode t)
 '(company-idle-delay 0.9)
 '(company-irony-ignore-case t)
 '(company-show-numbers t)
 '(company-tooltip-align-annotations t)
 '(company-transformers (quote (company-sort-by-occurrence)))
 '(company-ycmd-request-sync-timeout 0)
 '(compilation-scroll-output t)
 '(compilation-skip-threshold 2)
 '(confirm-kill-emacs (quote y-or-n-p))
 '(cscope-edit-single-match nil)
 '(cscope-indexer-ignored-directories
   (quote
	("CVS" "RCS" "SCCS" ".git" ".hg" ".bzr" ".cdv" ".pc" ".svn" "_MTN" "_darcs" "_sgbak" "debian")))
 '(cscope-no-mouse-prompts t)
 '(cscope-option-use-inverted-index t)
 '(cua-mode t nil (cua-base))
 '(diff-hl-flydiff-delay 4)
 '(dired-dwim-target t)
 '(dired-listing-switches "-alh")
 '(dired-recursive-copies (quote always))
 '(dired-recursive-deletes (quote always))
 '(display-time-mode nil)
 '(ediff-split-window-function (quote split-window-horizontally))
 '(electric-indent-mode t)
 '(electric-pair-mode t)
 '(enable-local-variables :all)
 '(eww-search-prefix "http://cn.bing.com/search?q=")
 '(explicit-shell-file-name "bash")
 '(fa-insert-method (quote name-and-parens-and-hint))
 '(fci-eol-char 32)
 '(fill-column 120)
 '(flycheck-check-syntax-automatically nil)
 '(flycheck-checker-error-threshold nil)
 '(flycheck-emacs-lisp-load-path (quote inherit))
 '(flycheck-indication-mode (quote right-fringe))
 '(flycheck-navigation-minimum-level (quote error))
 '(flymake-fringe-indicator-position (quote right-fringe))
 '(frame-resize-pixelwise t)
 '(ggtags-highlight-tag-delay 16)
 '(git-commit-fill-column 200)
 '(git-commit-summary-max-length 200)
 '(git-gutter:handled-backends (quote (git hg bzr svn)))
 '(git-gutter:update-interval 2)
 '(global-auto-revert-mode t)
 '(global-eldoc-mode nil)
 '(global-hl-line-sticky-flag t)
 '(grep-template "grep <X> <C> -nH -F <R> <F>")
 '(gtags-ignore-case nil)
 '(helm-ag-base-command "ag --nocolor --nogroup -S -Q ")
 '(helm-ag-fuzzy-match t)
 '(helm-always-two-windows t)
 '(helm-buffer-max-length 40)
 '(helm-candidate-number-limit 2000)
 '(helm-case-fold-search t)
 '(helm-for-files-preferred-list
   (quote
	(helm-source-buffers-list helm-source-bookmarks helm-source-recentf)))
 '(helm-gtags-auto-update t)
 '(helm-gtags-cache-max-result-size 504857600)
 '(helm-gtags-cache-select-result t)
 '(helm-gtags-ignore-case t)
 '(helm-gtags-maximum-candidates 2000)
 '(helm-gtags-suggested-key-mapping t)
 '(helm-gtags-update-interval-second 10)
 '(helm-semantic-display-style
   (quote
	((python-mode . semantic-format-tag-summarize)
	 (c-mode . semantic-format-tag-uml-prototype-default)
	 (emacs-lisp-mode . semantic-format-tag-abbreviate-emacs-lisp-mode))))
 '(helm-truncate-lines t t)
 '(horizontal-scroll-bar-mode t)
 '(icomplete-show-matches-on-no-input t)
 '(ido-mode (quote both) nil (ido))
 '(imenu-max-item-length 120)
 '(imenu-max-items 1000)
 '(inhibit-startup-screen t)
 '(irony-completion-trigger-commands
   (quote
	(self-insert-command newline-and-indent c-context-line-break c-electric-brace c-electric-paren c-electric-pound c-electric-semi&comma c-electric-star)))
 '(isearch-allow-scroll t)
 '(jit-lock-context-time 1.5)
 '(jit-lock-defer-time 0.5)
 '(large-file-warning-threshold 20000000)
 '(ls-lisp-verbosity nil)
 '(magit-cygwin-mount-points
   (quote
	(("/usr/bin/" . "c:/cygwin/bin/")
	 ("/usr/lib/" . "c:/cygwin/lib/")
	 ("/" . "c:/cygwin/"))))
 '(make-backup-files nil)
 '(mode-require-final-newline nil)
 '(moo-select-method (quote helm))
 '(mouse-wheel-progressive-speed nil)
 '(org-log-done (quote time))
 '(org-src-fontify-natively t)
 '(password-cache-expiry nil)
 '(pcmpl-gnu-tarfile-regexp "")
 '(recentf-auto-cleanup 600)
 '(rm-blacklist
   (quote
	(" hl-p" " yas" " hs" " Ifdef" " pair" " HelmGtags" " GG" " company" " ElDoc" " Irony" " AC" " FA" " GitGutter" " Gtags" " Anzu")))
 '(rscope-keymap-prefix "p")
 '(save-place t nil (saveplace))
 '(semantic-c-dependency-system-include-path
   (quote
	("C:/Program Files (x86)/Microsoft Visual Studio 8/VC/include" "C:/Program Files (x86)/Microsoft Visual Studio 8/VC/PlatformSDK/Include" "C:/Program Files (x86)/Microsoft Visual Studio 8/VC/atlmfc/include" "C:/Program Files (x86)/Microsoft Visual Studio 8/SDK/v2.0/include" "C:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include" "C:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/atlmfc/include" "C:/cygwin/usr/include" "D:/linux/linux-3.18.3/include/uapi")))
 '(semantic-idle-scheduler-idle-time 10)
 '(semantic-idle-scheduler-max-buffer-size 200000)
 '(semantic-idle-work-update-headers-flag t)
 '(semantic-imenu-bucketize-file nil)
 '(semantic-imenu-summary-function (quote semantic-format-tag-abbreviate))
 '(semantic-lex-spp-use-headers-flag t)
 '(semantic-symref-results-summary-function (quote semantic-format-tag-abbreviate))
 '(semanticdb-default-save-directory "d:\\semanticdb")
 '(shell-completion-execonly nil)
 '(show-paren-mode t)
 '(show-paren-when-point-in-periphery t)
 '(show-paren-when-point-inside-paren t)
 '(size-indication-mode t)
 '(sln-mode-devenv-2008 "Devenv.com")
 '(switch-window-shortcut-style (quote (quote qwerty)))
 '(tab-width 4)
 '(tabbar-cycle-scope (quote tabs))
 '(tool-bar-mode nil)
 '(undo-outer-limit 20000000)
 '(uniquify-buffer-name-style (quote post-forward-angle-brackets) nil (uniquify))
 '(user-full-name "gezijian")
 '(vc-svn-program "C:\\Program Files\\TortoiseSVN\\bin\\svn")
 '(vlf-batch-size 5000000)
 '(which-function-mode t)
 '(whitespace-line-column 120)
 '(winner-mode t)
 '(ycmd-confirm-fixit nil)
 '(ycmd-delete-process-delay 40)
 '(ycmd-idle-change-delay 5)
 '(ycmd-keepalive-period 3000)
 '(ycmd-parse-conditions (quote (save idle-change buffer-focus)))
 '(ycmd-seed-identifiers-with-keywords t)
 '(ycmd-server-args (quote ("--idle_suicide_seconds=10800")))
 '(ycmd-startup-timeout 40))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(dired-async-message ((t (:foreground "indian red"))))
 '(dired-async-mode-message ((t (:foreground "chocolate"))))
 '(helm-lisp-show-completion ((t (:background "navajo white"))))
 '(helm-selection-line ((t (:background "light steel blue" :underline t))))
 '(tabbar-default ((t (:inherit variable-pitch :background "gray75" :foreground "gray50" :height 0.9))))
 '(tabbar-modified ((t (:inherit tabbar-default :foreground "dark red" :box (:line-width 1 :color "white" :style released-button)))))
 '(zjl-hl-local-variable-reference-face ((t (:foreground "dark slate gray"))))
 '(zjl-hl-member-reference-face ((t (:foreground "dark goldenrod" :slant normal :weight normal)))))
;;-----------------------------------------------------------plugin begin-----------------------------------------------------------;;
;; gtags
(setq gtags-suggested-key-mapping nil)
(setq gtags-disable-pushy-mouse-mapping t)
(autoload 'gtags-mode "gtags" nil t)
(eval-after-load "gtags"
  '(progn
	 (define-key gtags-mode-map [C-down-mouse-1] 'ignore)
	 (define-key gtags-mode-map [C-down-mouse-3] 'ignore)
	 (define-key gtags-mode-map [mouse-2] 'gtags-find-tag-by-event)
	 (define-key gtags-mode-map (kbd "<C-mouse-3>") 'gtags-pop-stack)
	 (define-key gtags-mode-map (kbd "<C-mouse-1>") 'gtags-find-tag-by-event)
	 (define-key gtags-mode-map (kbd "C-c i") 'gtags-find-with-idutils)
	 (define-key gtags-select-mode-map "p" 'previous-line)
	 (define-key gtags-select-mode-map "n" 'next-line)
	 (define-key gtags-select-mode-map "q" 'kill-this-buffer)
	 (define-key gtags-select-mode-map [C-down-mouse-3] 'ignore)
	 (define-key gtags-select-mode-map [C-down-mouse-1] 'ignore)
	 (define-key gtags-select-mode-map [mouse-2] 'gtags-select-tag-by-event)
	 (define-key gtags-select-mode-map (kbd "<C-mouse-3>") 'gtags-pop-stack)
	 (define-key gtags-select-mode-map (kbd "<C-mouse-1>") 'gtags-select-tag-by-event)
	 ))
