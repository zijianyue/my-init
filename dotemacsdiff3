@@ -768,14 +742,12 @@
 
 ;; helm系列
 (autoload 'helm-show-kill-ring "helm-config" nil t)
 (autoload 'helm-semantic-or-imenu "helm-config" nil t)
 (autoload 'helm-for-files "helm-config" nil t)
 (autoload 'helm-resume "helm-config" nil t)
-(autoload 'helm-M-x "helm-config" nil t)
-
 (autoload 'helm-gtags-mode "helm-gtags" nil t)
 (autoload 'helm-gtags-select "helm-gtags" nil t)
 (autoload 'helm-gtags-select-path "helm-gtags" nil t)
 (autoload 'helm-gtags-find-tag "helm-gtags" nil t)
 (autoload 'helm-gtags-find-files "helm-gtags" nil t)
 (autoload 'helm-gtags-create-tags "helm-gtags" nil t)
@@ -800,13 +772,12 @@
 (global-set-key (kbd "C-S-v") 'helm-show-kill-ring)
 (global-set-key (kbd "<apps>") 'helm-semantic-or-imenu)
 (global-set-key (kbd "<C-apps>") 'helm-for-files)
 (global-set-key (kbd "<S-apps>") 'helm-resume)
 (global-set-key (kbd "<M-apps>") 'helm-ag-this-file)
 (global-set-key (kbd "M-]") 'helm-swoop)
-(global-set-key (kbd "C-M-x") 'helm-M-x)
 
 (global-set-key (kbd "C-c b") 'helm-gtags-find-files)
 (global-set-key (kbd "C-c B") 'gtags-find-file)
 (global-set-key (kbd "C-c d") 'helm-gtags-find-tag)
 (global-set-key (kbd "<f6>") 'helm-gtags-select-path)
 (global-set-key (kbd "<f7>") 'helm-gtags-select)
@@ -832,44 +803,13 @@
 	 ))
 
 (add-hook 'helm-update-hook
 		  (lambda ()
 			(setq truncate-lines t)))
 
-;; cflow 只能显示calling tree
-;; (autoload 'cflow-mode "cflow-mode")
-
-;; (setq auto-mode-alist (append auto-mode-alist
-;; 							  '(("\\.cflow$" . cflow-mode))))
-;; (defvar cmd nil nil)
-;; (defvar cflow-buf nil nil)
-;; (defvar cflow-buf-name nil nil)
-
-;; (defun yyc/cflow-function (function-name)
-;;   "Get call graph of inputed function. "
-;; 										;(interactive "sFunction name:\n")
-;;   (interactive (list (car (senator-jump-interactive "Function name: "
-;;                                                     nil nil nil))))
-;;   (setq cmd (format "cflow  -bT --number --main=%s %s" function-name buffer-file-name))
-;;   (setq cflow-buf-name (format "**cflow-%s:%s**"
-;;                                (file-name-nondirectory buffer-file-name)
-;;                                function-name))
-;;   (setq cflow-buf (get-buffer-create cflow-buf-name))
-;;   (set-buffer cflow-buf)
-;;   (setq buffer-read-only nil)
-;;   (erase-buffer)
-;;   (insert (shell-command-to-string cmd))
-;;   (pop-to-buffer cflow-buf)
-;;   (goto-char (point-min))
-;;   (cflow-mode)
-;;   (toggle-truncate-lines 1)
-;;   )
-
-;; (global-set-key (kbd "<C-f11>") 'yyc/cflow-function)
-
-;; cscope 不能识别extern "C"包裹的函数
+;; cscope
 ;; (require 'xcscope )
 ;; (cscope-setup)
 ;; (require 'rscope )
 (eval-after-load "xcscope"
   '(progn
 	 (setq cscope-suppress-user-symbol-prompt t)
@@ -893,49 +833,49 @@
 				(list (cons "Find all assignments of symbol: " (current-word)))))
   (rscope-handle-query (concat "9" symbol "\n")))
 
 (fset 'rscope-all-symbol-assignments 'rscope-all-symbol-assignments-fset)
 
 ;; flycheck
-(defvar package-user-dir "")			;防止check lisp出错
 (autoload 'flycheck-mode "flycheck" nil t)
 (global-set-key (kbd "M-g l") 'flycheck-list-errors)
+;; (global-set-key (kbd "<M-f5>") 'flycheck-buffer)
 (global-set-key (kbd "<M-f5>") (lambda () "" (interactive)
 								 ;; (require 'irony-cdb nil t)
 								 ;; (require 'irony-eldoc )
 								 ;; (irony-mode)
 								 ;; (irony--mode-exit)
-								 (unless flycheck-mode (flycheck-mode 1))
+								 (unless (flycheck-mode) (flycheck-mode 1))
 								 ;; (eldoc-mode 0)
 								 (flycheck-buffer)
 								 ))
 
 ;; irony-mode
 (eval-after-load "cc-mode"
   '(progn
 	 (require 'irony-cdb nil t)
-	 (require 'irony-eldoc )
+	 ;; (require 'irony-eldoc )
 	 ))
 
 (eval-after-load "irony"
   '(progn
 	 (defun my-irony-mode-hook ()
 	   (define-key irony-mode-map [remap completion-at-point]
 		 'irony-completion-at-point-async)
 	   (define-key irony-mode-map [remap complete-symbol]
 		 'irony-completion-at-point-async))
 	 (add-hook 'irony-mode-hook 'my-irony-mode-hook)
 	 (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
-	 (add-hook 'irony-mode-hook 'irony-eldoc)
+	 ;; (add-hook 'irony-mode-hook 'irony-eldoc)
 	 (setq w32-pipe-read-delay 0)
 	 (setq process-adaptive-read-buffering nil)
 	 (require 'flycheck-irony )
 	 (add-to-list 'flycheck-checkers 'irony)
 	 (require 'irony-cdb nil t)
-	 (require 'irony-eldoc )
-	 (eldoc-mode 0)
+	 ;; (require 'irony-eldoc )
+	 ;; (eldoc-mode 0)
 	 ))
 
 ;; 行号性能改善
 (require 'nlinum )
 (global-nlinum-mode 1)
 
