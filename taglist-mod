
;;; Code:



(require 'cl)
(require 'imenu-list)
;; ================================== My STRING utils ========================
(defun taglist-string-without-last (string n)
  "This function truncates from the STRING last N characters."
  (substring string 0 (max 0(- (length string) n))))

(defun taglist-string-ends-with (string end)

(defvar taglist-current-major-mode nil
  "current major mode")

(defface taglist-tag-type
  '((((class color))
     (:foreground "blue" :height 1.0))
    ;; (t (:weight bold))
	)
  "Regexp matching the text identifying the file in `taglist-mode'."
  :group 'taglist)

(defvar taglist-tag-type-face 'taglist-tag-type)

(defvar taglist-tag-type-re

    (if (and tag-record (= 0 (taglist-line tag-record)))
        (setq tag-record (nth (line-number-at-pos) taglist-actual-tags)))

    (if (and tag-record (taglist-line tag-record))
        (progn
          ;; (kill-buffer (current-buffer))

          (switch-to-buffer taglist-source-code-buffer t)

          (taglist-goto-line (taglist-line tag-record))

          (recenter)
		  
		  (with-current-buffer (current-buffer)
			(set-buffer (get-buffer tag-list-buffer-name))
			(unless (eq taglist-search-string "")
			  (with-selected-window (get-buffer-window (get-buffer tag-list-buffer-name))
				(setq taglist-search-string "")
				(taglist-search-string-updated)
				(taglist-highlight-current-tag)
				)))
		  )
      (message "The line does not contain tag description!"))))

(defun taglist-matches-all (string substrings)
  "Return non-nil if STRING contain each of SUBSTRINGS as a substring."
  (reduce (lambda (prev part) (and prev (string-match part string))) substrings :initial-value t))

  (define-key map (char-to-string key) (taglist-make-key-function key)))

(defun taglist-escape ()
  "Kill tag list buffer."
  (interactive)
  (kill-buffer (current-buffer))
  ;; (delete-file taglist-tmp-file)
  (switch-to-buffer taglist-source-code-buffer)
  (tag-list-stop-timer))

(defvar taglist-mode-map
  (let ((map (make-sparse-keymap)))
    (suppress-keymap map)
    (do ((k (string-to-char "a") (+ 1 k))) ((> k (string-to-char "z")))
      (define-key
    (define-key map (kbd "<RET>") 'taglist-jump-to-tag)
    (define-key map (kbd "<backspace>") 'taglist-backspace-pressed)
    ;; Cause M-v doesn't work!!!
    ;; (define-key map (kbd "<ESC>") 'taglist-escape)
    (define-key map (kbd "C-q") 'taglist-escape)
    (define-key map (kbd "M-q") 'taglist-escape)
    ;; (define-key map "\C-v" 'scroll-up)
    ;; (define-key map "\M-v" 'scroll-down)
    map)
  "Keymap for `taglist-mode'.")

(defcustom ctags-executable-directory nil
  "If non-nil the directory to search global executables."
  :type '(choice (const :tag "Unset" nil) directory)
    ;; (message "found tag-line = %d" tag-line)

    (let ((line (position-if
                 (lambda (item) (= tag-line (taglist-line item)))
                 taglist-actual-tags)))
      (when line
		(unless (eq (line-number-at-pos) (+ 1 line))
		  (taglist-goto-line (1+ line))))))

  (hl-line-mode))

(defconst tag-list-buffer-name "*TagList*"
  "Name of the buffer that is used to display imenu entries.")

(defun tag-list-install-display-buffer ()
  "Install imenu-list display settings to `display-buffer-alist'."
  (cl-pushnew `(,(concat "^" (regexp-quote tag-list-buffer-name) "$")
                imenu-list-display-buffer)
              display-buffer-alist
              :test #'equal))
(tag-list-install-display-buffer)
(defvar tag-list--timer nil)

(defun tag-list-start-timer ()
  (tag-list-stop-timer)
  (setq tag-list--timer
        (run-with-idle-timer 1 t #'tag-list-update-safe)))

(defun tag-list-stop-timer ()
  (when tag-list--timer
    (cancel-timer tag-list--timer)
    (setq tag-list--timer nil)))

(defun tag-list-update-safe ()
  "Call `imenu-list-update', return nil if an error occurs."
  (ignore-errors (tag-list-update)))

(defun tag-list-update ()
  "Refresh taglist."
  (if (or (minibufferp (current-buffer))
		  (string-equal "*" (substring (buffer-name) 0 1))
		  (eq major-mode 'dired-mode))
	  (error "Invalid buffer"))
  (unless (eq (current-buffer) (get-buffer tag-list-buffer-name))
	(setq taglist-current-line (line-number-at-pos))
	(if (eq taglist-source-code-buffer (current-buffer))
		(progn
		  (with-current-buffer (current-buffer)
			(set-buffer (get-buffer tag-list-buffer-name))
			(with-selected-window (get-buffer-window (get-buffer tag-list-buffer-name))
			  (taglist-highlight-current-tag)))
		  )
	  (progn
		(with-current-buffer (current-buffer)
		  (setq taglist-source-code-buffer (current-buffer))
		  ;; (setq taglist-tmp-file (make-temp-file "taglist."))
		  (setq taglist-tmp-file (buffer-file-name))
		  (setq taglist-current-major-mode major-mode)
		  ;; (write-region (point-min) (point-max) taglist-tmp-file)
		  (set-buffer (get-buffer tag-list-buffer-name))
		  (with-selected-window (get-buffer-window (get-buffer tag-list-buffer-name))
			(taglist-mode-init))))
	  )))

;;;###autoload
(defun taglist-list-tags ()
  "Show tag list of current buffer in a newly created buffer.
This function is recommended to be bound to some convinient hotkey."
  (interactive)
  (if (string= (taglist-ctags-variant) "emacs-ctags")
      (error "taglist doesn't support emacs ctags, please install universal-ctags or exuberant-ctags!")
    )
  (setq taglist-source-code-buffer (current-buffer))
  (setq taglist-current-line (line-number-at-pos))
  (setq taglist-current-major-mode major-mode)
  (setq taglist-tmp-file (buffer-file-name))
  ;; (setq taglist-tmp-file (make-temp-file "taglist."))
  ;; (write-region (point-min) (point-max) taglist-tmp-file)
  ;; (switch-to-buffer (get-buffer-create (concat (buffer-name (current-buffer)) " tag list")) t)
  (pop-to-buffer (get-buffer-create tag-list-buffer-name))
  (tag-list-start-timer)

  (taglist-mode))


(defun taglist-mode-init ()
  "Initialize tag list mode."

