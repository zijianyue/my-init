	   (let* ((file buffer-file-name)
			  (backend (vc-backend file)))
		 (when backend
		   (let ((state (cond
						 ((eq 'SVN backend) (vc-svn-state file))
						 ((eq 'Git backend) (vc-git-state file))
						 (t (vc-state file backend))
						 )))
			 (cond
			  ((diff-hl-modified-p state)
			   (let* (diff-auto-refine-mode res)
				 (with-current-buffer (diff-hl-changes-buffer file backend)
				   (goto-char (point-min))
				   (unless (eobp)
					 (ignore-errors
					   (diff-beginning-of-hunk t))
					 (while (looking-at diff-hunk-header-re-unified)
					   (let ((line (string-to-number (match-string 3)))
							 (len (let ((m (match-string 4)))
									(if m (string-to-number m) 1)))
							 (beg (point)))
						 (diff-end-of-hunk)
						 (let* ((inserts (diff-count-matches "^\\+" beg (point)))
								(deletes (diff-count-matches "^-" beg (point)))
								(type (cond ((zerop deletes) 'insert)
											((zerop inserts) 'delete)
											(t 'change))))
						   (when (eq type 'delete)
							 (setq len 1)
							 (cl-incf line))
						   (push (list line len type) res))))))
				 (nreverse res)))
			  ((eq state 'added)
			   `((1 ,(line-number-at-pos (point-max)) insert)))
			  ((eq state 'removed)
			   `((1 ,(line-number-at-pos (point-max)) delete))))))))
	 (fset 'diff-hl-changes 'diff-hl-changes-fset)
	 ))

(defun toggle-git-backend ()
  "docstring"
  (interactive)
  (if (memq 'Git vc-handled-backends)
      (setq vc-handled-backends (delq 'Git vc-handled-backends))
    (progn (add-to-list 'vc-handled-backends 'Git)
           (if (and (not (eq major-mode 'vc-dir-mode))
                    (not (vc-backend buffer-file-name)))
               (reopen-file)))))
(global-set-key (kbd "M-g h") 'toggle-git-backend)
(defadvice diff-hl-mode(around diff-hl-mode-ar activate)
  (if (not diff-hl-mode)
      (progn
        (setq vc-handled-backends (append '(Git) vc-handled-backends))
        (if (and (not (eq major-mode 'vc-dir-mode))
                 (not (vc-backend buffer-file-name)))
            (reopen-file))
        ad-do-it
        (setq vc-handled-backends (delq 'Git vc-handled-backends)))
    (progn
      (setq vc-handled-backends (delq 'Git vc-handled-backends)))))
  
(defadvice global-diff-hl-mode(before global-diff-hl-mode-bef activate)
  (if (not global-diff-hl-mode)
      (progn
        (add-to-list 'vc-handled-backends 'Git)
        (ad-deactivate 'diff-hl-mode)
        (if (and (not (eq major-mode 'vc-dir-mode))
                 (not (vc-backend buffer-file-name)))
            (reopen-file)))
    (progn
      (setq vc-handled-backends (delq 'Git vc-handled-backends)))))

;; wgrep
(autoload 'wgrep-setup "wgrep")
(add-hook 'grep-setup-hook 'wgrep-setup)
(setq wgrep-enable-key "r")

(autoload 'wgrep-pt-setup "wgrep-pt")
(add-hook 'pt-search-mode-hook 'wgrep-pt-setup)

;; mode line
;; (require 'rich-minority)
;; (rich-minority-mode 1)

;; pt
(autoload 'pt-regexp "pt" nil t)

;; fast silver searcher
(autoload 'my-ag "ag" nil t)
(autoload 'ag-this-file "ag" nil t)
(autoload 'ag-dired "ag" nil t)
(autoload 'ag-dired-regexp "ag" nil t)

(global-set-key (kbd "<f9>") 'ag-this-file)
(global-set-key (kbd "<C-f9>") 'my-ag)
(global-set-key (kbd "<S-f6>") 'vc-git-grep) ;速度最快,区分大小写
(global-set-key (kbd "<S-f9>") 'ag-dired)
;; C-c C-k 停止ag-dired

(autoload 'wgrep-ag-setup "wgrep-ag")
(add-hook 'ag-mode-hook 'wgrep-ag-setup)

(eval-after-load "ag"
  '(progn
	 (require 'grep )
	 (defun my-ag (string directory)
	   ""
	   (interactive (list (grep-read-regexp)
						  (read-directory-name "Directory: ")))
	   (ag/search string directory))

	 (defun my-ag-project (string)
	   ""
	   (interactive (list (grep-read-regexp)))
	   (ag/search string (ag/project-root default-directory)))
	 
	 (defun ag-this-file (string file-regex directory)
	   ""
	   (interactive (list (grep-read-regexp)
						  (setq file-regex (list :file-regex
												 (concat "/" (file-name-nondirectory (buffer-file-name) ) "$")))
						  (setq directory default-directory)))
	   (setq arg-bak ag-arguments)
	   (add-to-list 'ag-arguments "-u")
	   (apply #'ag/search string directory file-regex)
	   (setq ag-arguments arg-bak))

	 (defun ag/kill-process-fset ()
	   ""
	   (interactive)
	   (let ((ag (get-buffer-process (current-buffer))))
		 (and ag (eq (process-status ag) 'run)
			  ;; (eq (process-filter ag) (function find-dired-filter))
			  (condition-case nil
				  (delete-process ag)
				(error nil)))))
	 (fset 'ag/kill-process 'ag/kill-process-fset)

	 (defun ag-dired-regexp-fset (dir regexp)
	   ""
	   (interactive "DDirectory: \nsFile regexp: ")
	   (let* ((dired-buffers dired-buffers) ;; do not mess with regular dired buffers
			  (orig-dir dir)
			  (dir (file-name-as-directory (expand-file-name dir)))
			  (buffer-name (if ag-reuse-buffers
							   "*ag dired*"
							 (format "*ag dired pattern:%s dir:%s*" regexp dir)))
			  (cmd (concat ag-executable " --nocolor -ui -g \"" regexp "\" "
						   (shell-quote-argument dir)
						   " | grep -v \"^$\" | sed 's:\\\\:\\\\\\\\:g' | xargs -I '{}' ls "
						   dired-listing-switches " '{}' &")))
		 (with-current-buffer (get-buffer-create buffer-name)
		   (switch-to-buffer (current-buffer))
		   (widen)
		   (kill-all-local-variables)
		   (if (fboundp 'read-only-mode)
			   (read-only-mode -1)
			 (setq buffer-read-only nil))
		   (let ((inhibit-read-only t)) (erase-buffer))
		   (setq default-directory dir)
		   (run-hooks 'dired-before-readin-hook)
		   (shell-command cmd (current-buffer))
		   (insert "  " dir ":\n")
		   (insert "  " cmd "\n")
		   (dired-mode dir)
		   (let ((map (make-sparse-keymap)))
			 (set-keymap-parent map (current-local-map))
			 (define-key map "\C-c\C-k" 'ag/kill-process)
			 (use-local-map map))
		   (set (make-local-variable 'dired-sort-inhibit) t)
		   (set (make-local-variable 'revert-buffer-function)
				`(lambda (ignore-auto noconfirm)
				   (ag-dired-regexp ,orig-dir ,regexp)))
		   (if (fboundp 'dired-simple-subdir-alist)
			   (dired-simple-subdir-alist)
			 (set (make-local-variable 'dired-subdir-alist)
				  (list (cons default-directory (point-min-marker)))))
		   (let ((proc (get-buffer-process (current-buffer))))
			 (set-process-filter proc #'ag/dired-filter)
			 (set-process-sentinel proc #'ag/dired-sentinel)
			 ;; Initialize the process marker; it is used by the filter.
			 (move-marker (process-mark proc) 1 (current-buffer)))
		   (setq mode-line-process '(":%s")))))
	 
	 (fset 'ag-dired-regexp 'ag-dired-regexp-fset)

	 (defvar ag-search-cnt 0 "search cnt")
	 (defun ag/buffer-name-fset (search-string directory regexp)
	   "Return a buffer name formatted according to ag.el conventions."
	   (cond
		(ag-reuse-buffers "*ag search*")
		(regexp (format "*ag regexp:%s %d*" search-string (setq ag-search-cnt (1+ ag-search-cnt))))
		(:else (format "*ag:%s %d*" search-string (setq ag-search-cnt (1+ ag-search-cnt))))))
	 (fset 'ag/buffer-name 'ag/buffer-name-fset)
	 ))

;; magit
;; 环境变量PATH里面一定要有C:\Program Files\Git\cmd, 不能有C:\Program Files\TortoiseGit\bin，否则git命令在shell里不好使
(setenv "GIT_ASKPASS" "git-gui--askpass") ;解决git push不提示密码的问题
(setenv "SSH_ASKPASS" "git-gui--askpass")
(setenv "GIT_SSH" "c:/Program Files (x86)/PuTTY/plink.exe")
;; 要想保存密码不用每次输入得修改.git-credentials和.gitconfig
;; 解决magit和服务器的乱码问题，不需要在.gitconfig中改118n的配置(比如配置成gb2312)
(defun my-git-commit-hook ()
  (set-buffer-file-coding-system 'utf-8-unix))

(defun my-git-commit-hook-gbk ()
  (set-buffer-file-coding-system 'chinese-gbk-unix))

;; 删除自带的git支持，在触发相关命令时再打开

(setq vc-handled-backends (delq 'Git vc-handled-backends))

(defadvice vc-dir (around vc-dir-ar activate)
  (setq vc-handled-backends (append '(Git) vc-handled-backends))
  ad-do-it
  (setq vc-handled-backends (delq 'Git vc-handled-backends)))
(defadvice vc-print-log (around vc-print-log-ar activate)
  (setq vc-handled-backends (append '(Git) vc-handled-backends))

  (if (and (not (eq major-mode 'vc-dir-mode))
       (not (vc-backend buffer-file-name)))
      (reopen-file))
  ad-do-it
  (setq vc-handled-backends (delq 'Git vc-handled-backends)))
(defadvice vc-next-action (around vc-next-action-ar activate)
  (setq vc-handled-backends (append '(Git) vc-handled-backends))
  (if (and (not (eq major-mode 'vc-dir-mode))
           (not (vc-backend buffer-file-name)))
      (reopen-file))
  ad-do-it
  (setq vc-handled-backends (delq 'Git vc-handled-backends)))
(defadvice vc-revert (around vc-revert-ar activate)
  (setq vc-handled-backends (append '(Git) vc-handled-backends))
  (if (and (not (eq major-mode 'vc-dir-mode))
           (not (vc-backend buffer-file-name)))
      (reopen-file))
  ad-do-it
  (setq vc-handled-backends (delq 'Git vc-handled-backends)))
(defadvice vc-push (around vc-push-ar activate)
  (setq vc-handled-backends (append '(Git) vc-handled-backends))
  (if (and (not (eq major-mode 'vc-dir-mode))
           (not (vc-backend buffer-file-name)))
      (reopen-file))
  ad-do-it
  (setq vc-handled-backends (delq 'Git vc-handled-backends)))
(defadvice vc-update (around vc-update-ar activate)
  (setq vc-handled-backends (append '(Git) vc-handled-backends))
  (if (and (not (eq major-mode 'vc-dir-mode))
           (not (vc-backend buffer-file-name)))
      (reopen-file))
  ad-do-it
  (setq vc-handled-backends (delq 'Git vc-handled-backends)))

(add-hook 'magit-mode-hook 'my-git-commit-hook)
(add-hook 'magit-status-mode-hook 'my-git-commit-hook)
(add-hook 'git-commit-mode-hook 'my-git-commit-hook)
(add-hook 'magit-log-mode-hook
		  (lambda ()
			(setq truncate-lines nil)))
;; (add-hook 'magit-revision-mode-hook 'my-git-commit-hook-gbk)

(autoload 'magit-status "magit" nil t)
(autoload 'magit-dispatch-popup "magit" nil t)
(autoload 'magit-blame "magit" nil t)
(autoload 'magit-log-buffer-file "magit" nil t)

(global-set-key (kbd "C-x g") 'magit-status)
(global-set-key (kbd "C-x M-g") 'magit-dispatch-popup)
(global-set-key (kbd "C-x t g") 'magit-blame)
(global-set-key (kbd "C-x t l") 'magit-log-buffer-file)

;; 避免时区差8小时
(eval-after-load "magit"
  '(progn
	 (defadvice magit-blame-format-time-string (before magit-blame-format-time-strin-bef activate)
	   ""
	   (setq tz 0))
	 ;; magit-git-output-coding-system默认值改为nil防止diff乱码，但是会影响stash和blame，所以在这临时改为utf-8
	 ;; (defadvice magit-insert-stashes (around magit-insert-stashes-ar activate)
	 ;;   ""
	 ;;   (setq magit-git-output-coding-system 'utf-8)
	 ;;   ad-do-it
	 ;;   (setq magit-git-output-coding-system nil)
	 ;;   )
     ;; (defadvice magit-git-wash (around magit-git-wash-ar activate)
	 ;;   ""
     ;;   (if (eq washer 'magit-diff-wash-diffs)
     ;;       (progn
     ;;         (message "git-diff")
     ;;         (setq magit-git-output-coding-system 'nil)))
     ;;   ad-do-it
	 ;;   (setq magit-git-output-coding-system 'utf-8)
	 ;;   )
     
     (defadvice magit-insert-diff (around magit-insert-diff-ar activate)
	   ""
	   (setq magit-git-output-coding-system 'nil)
	   ad-do-it
	   (setq magit-git-output-coding-system 'utf-8)
	   )
     (defadvice magit-insert-revision-diff (around magit-insert-revision-diff-ar activate)
	   ""
	   (setq magit-git-output-coding-system 'nil)
	   ad-do-it
	   (setq magit-git-output-coding-system 'utf-8)
	   )
     (defadvice magit-insert-unstaged-changes (around magit-insert-unstaged-changes-ar activate)
	   ""
	   (setq magit-git-output-coding-system 'nil)
	   ad-do-it
	   (setq magit-git-output-coding-system 'utf-8)
	   )
     (defadvice magit-insert-staged-changes (around magit-insert-staged-changes-ar activate)
	   ""
	   (setq magit-git-output-coding-system 'nil)
	   ad-do-it
	   (setq magit-git-output-coding-system 'utf-8)
	   )
     (defadvice magit-stash-insert-section (around magit-stash-insert-section-ar activate)
	   ""
	   (setq magit-git-output-coding-system 'nil)
	   ad-do-it
	   (setq magit-git-output-coding-system 'utf-8)
	   )
     (defadvice magit-merge-preview-refresh-buffer (around magit-merge-preview-refresh-buffer-ar activate)
	   ""
	   (setq magit-git-output-coding-system 'nil)
	   ad-do-it
	   (setq magit-git-output-coding-system 'utf-8)
	   )
     
	 ;; (defadvice magit-rev-format (around magit-rev-format-ar activate)
	 ;;   ""
	 ;;   (setq magit-git-output-coding-system 'utf-8)
	 ;;   ad-do-it
	 ;;   (setq magit-git-output-coding-system nil)
	 ;;   )
	 ;; (defadvice magit-blame (around magit-blame-ar activate)
	 ;;   ""
	 ;;   (setq-local magit-git-output-coding-system 'utf-8)
	 ;;   ad-do-it
	 ;;   ;; (setq magit-git-output-coding-system nil)
	 ;;   )

	 (remove-hook 'magit-refs-sections-hook 'magit-insert-tags)
	 (remove-hook 'server-switch-hook 'magit-commit-diff) ;提交时不显示差异，如需显示敲c-c c-d
	 ))

;; purpose
(autoload 'purpose-mode "window-purpose" nil t)
(autoload 'purpose-toggle-window-buffer-dedicated "window-purpose"nil t)
(global-set-key (kbd "<C-f10>") 'purpose-mode)
(global-set-key (kbd "<C-S-f10>") 'purpose-toggle-window-buffer-dedicated)

;; 星际译王
(defun kid-sdcv-to-buffer (&optional input)
  (interactive "P")
  (let ((word (if mark-active
                  (buffer-substring-no-properties (region-beginning) (region-end))
				(current-word nil t))))
	(if input
		(setq word (read-string (format "Search the dictionary for (default %s): " word)
								nil nil word)))
    
    (set-buffer (get-buffer-create "*sdcv*"))
    (buffer-disable-undo)
    (erase-buffer)
	(message "searching for %s ..." word)

    (let ((process (start-process  "sdcv" "*sdcv*"  "sdcv" "-n" "--utf8-input" "--utf8-output" word)))
      (set-process-sentinel
       process
       (lambda (process signal)
         (when (memq (process-status process) '(exit signal))
           (unless (string= (buffer-name) "*sdcv*")
             (setq kid-sdcv-window-configuration (current-window-configuration))
             (switch-to-buffer-other-window "*sdcv*")
             (local-set-key (kbd "RET") 'kid-sdcv-to-buffer)
             (local-set-key (kbd ",") (lambda ()
                                        (interactive)
										(quit-window t))));; quit-window t 可以关闭窗口并恢复原先窗口布局,但是buffer被kill
           (goto-char (point-min))
		   (open-line 1)))))))

(global-set-key (kbd "<M-f11>") 'kid-sdcv-to-buffer)

;; 显示搜索index
(require 'anzu)
(global-anzu-mode +1)
(setq anzu-search-threshold 200) ;;防止大文件搜索时很卡
(global-set-key (kbd "M-%") 'anzu-query-replace)
(global-set-key (kbd "C-M-%") 'anzu-query-replace-regexp)

;; anzu mode-line不显示括号
(defun anzu--update-mode-line-default-fset (here total)
  (when anzu--state
    (let ((status (cl-case anzu--state
                    (search (format "%s/%d%s"
                                    (anzu--format-here-position here total)
                                    total (if anzu--overflow-p "+" "")))
                    (replace-query (format "%d replace" total))
                    (replace (format "%d/%d" here total)))))
      (propertize status 'face 'anzu-mode-line))))
(fset 'anzu--update-mode-line-default 'anzu--update-mode-line-default-fset)

;; tabbar
;; (require 'tabbar )
;; (tabbar-mode)

(global-set-key (kbd "<C-tab>") 'tabbar-forward-tab)
(global-set-key (kbd "<C-S-tab>") 'tabbar-backward-tab)

(setq tabbar-ruler-use-mode-icons nil)

(require 'tabbar-ruler)
(copy-face 'font-lock-function-name-face 'tabbar-selected)
;; 防止undo后标签颜色不恢复
;; (add-hook 'post-command-hook 'after-modifying-buffer);;这个是在每个命令执行后
(defadvice undo(after undo-after activate)
  (on-modifying-buffer)
  )
(defadvice redo(after redo-after activate)
  (on-modifying-buffer)
  )
(add-hook 'after-revert-hook 'on-modifying-buffer)

(defadvice tabbar-buffer-close-tab(after tabbar-buffer-close-tab-after activate)
  (tabbar-display-update)
  )
(defun tabbar-ruler-group-user-buffers-helper-dired ()
  (list (cond ((string-equal "*" (substring (buffer-name) 0 1)) "emacs's buffers")
			  (t "user's buffers"))))
(setq tabbar-buffer-groups-function 'tabbar-ruler-group-user-buffers-helper-dired)
;; (defun on-modifying-buffer-fset ()
;;   (set-buffer-modified-p (buffer-modified-p))
;;   (tabbar-set-template tabbar-current-tabset nil)
;;   ;; (tabbar-display-update)
;;   )
;; (defun on-saving-buffer-fset ()
;;   (tabbar-set-template tabbar-current-tabset nil))

;; (defun after-modifying-buffer-fset (begin end length)
;;   (set-buffer-modified-p (buffer-modified-p))
;;   (tabbar-set-template tabbar-current-tabset nil)
;;   ;; (tabbar-display-update)
;;   )

;; (fset 'on-modifying-buffer 'on-modifying-buffer-fset)
;; (fset 'after-modifying-buffer 'after-modifying-buffer-fset)
;; (fset 'on-saving-buffer 'on-saving-buffer-fset)

;; 切换主题后刷新tabbar背景色
(defadvice enable-theme(after enable-theme-after activate)
  (tabbar-install-faces)
  (copy-face 'font-lock-function-name-face 'tabbar-selected)
  )
(defadvice disable-theme(after disable-theme-after activate)
  (tabbar-install-faces)
  (copy-face 'font-lock-function-name-face 'tabbar-selected)
  )
(defadvice make-frame-command(after make-frame-command-after activate)
  (tabbar-install-faces)
  (copy-face 'font-lock-function-name-face 'tabbar-selected)
  )
;; ycmd
;; 文件中不能有当前编码无法识别的字符，否则ycmd会出错
;; 会报(wrong-type-argument number-or-marker-p nil)错误
;; 解决办法：c-x RET f输入utf-8回车，会提示乱码的位置

;; 标准加载方式
;; (require 'ycmd)
;; (add-hook 'after-init-hook #'global-ycmd-mode)
;; (require 'company-ycmd)
;; (company-ycmd-setup)
;; (require 'flycheck-ycmd)
;; (flycheck-ycmd-setup)

;; (autoload 'ycmd-mode "ycmd" nil t)
;; (autoload 'global-ycmd-mode "ycmd" nil t)

(global-set-key (kbd "M-.") (lambda () "" (interactive)
							  (require 'ycmd )
							  (unless (ycmd-running?) (ycmd-open))
							  (unless ycmd-mode (ycmd-mode 1))
							  (ycmd-goto-imprecise)
							  ))
;; (global-set-key (kbd "M-.") 'ycmd-goto-imprecise)
(global-set-key (kbd "M-p") (lambda () "" (interactive)
							  (require 'ycmd )
							  (unless (ycmd-running?) (ycmd-open))
							  (unless ycmd-mode (ycmd-mode 1))
							  (ycmd-get-type t)
							  ))
;; (global-set-key (kbd "M-p") 'ycmd-get-type)
(global-set-key (kbd "C-.") (lambda () "" (interactive)
							  (require 'ycmd )
							  (unless (ycmd-running?) (ycmd-open))
							  (unless ycmd-mode (ycmd-mode 1))
							  (ycmd-get-parent)
