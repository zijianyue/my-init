  (anzu-mode 1))

;; ace
(define-key cua--cua-keys-keymap [(meta v)] nil)
(autoload 'ace-window "ace-window" nil t)
(autoload 'ace-jump-char-mode "ace-jump-mode" nil t)

(eval-after-load "ace-window"
  '(progn
	 (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))))

(eval-after-load "ace-jump-mode"
  '(progn
	 (setq ace-jump-mode-move-keys (loop for i from ?a to ?z collect i))))

(global-set-key (kbd "M-v") 'ace-window)
(global-set-key (kbd "M-j") 'ace-jump-char-mode)


;; 查看diff
(require 'diff-hl-margin )
(global-diff-hl-mode)
;; (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
;; (autoload 'diff-hl-dired-mode "diff-hl-margin" nil t)
;; (autoload 'turn-on-diff-hl-mode "diff-hl-margin" nil t)
(autoload 'diff-hl-flydiff-mode "diff-hl-flydiff" nil t)
;; (diff-hl-flydiff-mode 1)
;; (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
;; (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode)
(defun diff-hl-changes-fset ()
  (let* ((file buffer-file-name)
         (backend (vc-backend file)))
    (when backend
      (let ((state (cond
					((eq 'SVN backend) (vc-svn-state file))
					((eq 'Git backend) (vc-git-state file))
					(t (vc-state file backend))
					)))
        (cond
         ((diff-hl-modified-p state)
          (let* (diff-auto-refine-mode res)
            (with-current-buffer (diff-hl-changes-buffer file backend)
              (goto-char (point-min))
              (unless (eobp)
                (ignore-errors
                  (diff-beginning-of-hunk t))
                (while (looking-at diff-hunk-header-re-unified)
                  (let ((line (string-to-number (match-string 3)))
                        (len (let ((m (match-string 4)))
                               (if m (string-to-number m) 1)))
                        (beg (point)))
                    (diff-end-of-hunk)
                    (let* ((inserts (diff-count-matches "^\\+" beg (point)))
                           (deletes (diff-count-matches "^-" beg (point)))
                           (type (cond ((zerop deletes) 'insert)
                                       ((zerop inserts) 'delete)
                                       (t 'change))))
                      (when (eq type 'delete)
                        (setq len 1)
                        (cl-incf line))
                      (push (list line len type) res))))))
            (nreverse res)))
         ((eq state 'added)
          `((1 ,(line-number-at-pos (point-max)) insert)))
         ((eq state 'removed)
          `((1 ,(line-number-at-pos (point-max)) delete))))))))

(fset 'diff-hl-changes 'diff-hl-changes-fset)
;; wgrep
(autoload 'wgrep-setup "wgrep")
(add-hook 'grep-setup-hook 'wgrep-setup)
(setq wgrep-enable-key "r")

(autoload 'wgrep-pt-setup "wgrep-pt")
(add-hook 'pt-search-mode-hook 'wgrep-pt-setup)

;; refactor
;; (autoload 'srefactor-refactor-at-point "srefactor" nil t)
;; (global-set-key (kbd "C-.") 'srefactor-refactor-at-point)

;; 括号
;; (require 'autopair)
;; (autopair-global-mode)

;; mode line
(require 'rich-minority)
(rich-minority-mode 1)

;; pt
(autoload 'pt-regexp "pt" nil t)

;; fast silver searcher
(autoload 'my-ag "ag" nil t)
(autoload 'ag-this-file "ag" nil t)
(autoload 'ag-dired "ag" nil t)
(autoload 'ag-dired-regexp "ag" nil t)

(global-set-key (kbd "<f9>") 'ag-this-file)
(global-set-key (kbd "<C-f9>") 'my-ag)
(global-set-key (kbd "<S-f6>") 'vc-git-grep) ;速度最快,区分大小写
(global-set-key (kbd "<S-f9>") 'ag-dired)
;; C-c C-k 停止ag-dired

(autoload 'wgrep-ag-setup "wgrep-ag")
(add-hook 'ag-mode-hook 'wgrep-ag-setup)

(eval-after-load "ag"
  '(progn
	 (require 'grep )
	 (defun my-ag (string directory)
	   ""
	   (interactive (list (grep-read-regexp)
						  (read-directory-name "Directory: ")))
	   (ag/search string directory))

	 (defun my-ag-project (string)
	   ""
	   (interactive (list (grep-read-regexp)))
	   (ag/search string (ag/project-root default-directory)))
	 
	 (defun ag-this-file (string file-regex directory)
	   ""
	   (interactive (list (grep-read-regexp)
						  (setq file-regex (list :file-regex
												 (concat "/" (file-name-nondirectory (buffer-file-name) ) "$")))
						  (setq directory default-directory)))
	   (setq arg-bak ag-arguments)
	   (add-to-list 'ag-arguments "-u")
	   (apply #'ag/search string directory file-regex)
	   (setq ag-arguments arg-bak))

	 (defun ag/kill-process-fset ()
	   ""
	   (interactive)
	   (let ((ag (get-buffer-process (current-buffer))))
		 (and ag (eq (process-status ag) 'run)
			  ;; (eq (process-filter ag) (function find-dired-filter))
			  (condition-case nil
				  (delete-process ag)
				(error nil)))))
	 (fset 'ag/kill-process 'ag/kill-process-fset)

	 (defun ag-dired-regexp-fset (dir regexp)
	   ""
	   (interactive "DDirectory: \nsFile regexp: ")
	   (let* ((dired-buffers dired-buffers) ;; do not mess with regular dired buffers
			  (orig-dir dir)
			  (dir (file-name-as-directory (expand-file-name dir)))
			  (buffer-name (if ag-reuse-buffers
							   "*ag dired*"
							 (format "*ag dired pattern:%s dir:%s*" regexp dir)))
			  (cmd (concat ag-executable " --nocolor -ui -g \"" regexp "\" "
						   (shell-quote-argument dir)
						   " | grep -v \"^$\" | sed 's:\\\\:\\\\\\\\:g' | xargs -I '{}' ls "
						   dired-listing-switches " '{}' &")))
		 (with-current-buffer (get-buffer-create buffer-name)
		   (switch-to-buffer (current-buffer))
		   (widen)
		   (kill-all-local-variables)
		   (if (fboundp 'read-only-mode)
			   (read-only-mode -1)
			 (setq buffer-read-only nil))
		   (let ((inhibit-read-only t)) (erase-buffer))
		   (setq default-directory dir)
		   (run-hooks 'dired-before-readin-hook)
		   (shell-command cmd (current-buffer))
		   (insert "  " dir ":\n")
		   (insert "  " cmd "\n")
		   (dired-mode dir)
		   (let ((map (make-sparse-keymap)))
			 (set-keymap-parent map (current-local-map))
			 (define-key map "\C-c\C-k" 'ag/kill-process)
			 (use-local-map map))
		   (set (make-local-variable 'dired-sort-inhibit) t)
		   (set (make-local-variable 'revert-buffer-function)
				`(lambda (ignore-auto noconfirm)
				   (ag-dired-regexp ,orig-dir ,regexp)))
		   (if (fboundp 'dired-simple-subdir-alist)
			   (dired-simple-subdir-alist)
			 (set (make-local-variable 'dired-subdir-alist)
				  (list (cons default-directory (point-min-marker)))))
		   (let ((proc (get-buffer-process (current-buffer))))
			 (set-process-filter proc #'ag/dired-filter)
			 (set-process-sentinel proc #'ag/dired-sentinel)
			 ;; Initialize the process marker; it is used by the filter.
			 (move-marker (process-mark proc) 1 (current-buffer)))
		   (setq mode-line-process '(":%s")))))
	 
	 (fset 'ag-dired-regexp 'ag-dired-regexp-fset)

	 (defvar ag-search-cnt 0 "search cnt")
	 (defun ag/buffer-name-fset (search-string directory regexp)
	   "Return a buffer name formatted according to ag.el conventions."
	   (cond
		(ag-reuse-buffers "*ag search*")
		(regexp (format "*ag regexp:%s %d*" search-string (setq ag-search-cnt (1+ ag-search-cnt))))
		(:else (format "*ag:%s %d*" search-string (setq ag-search-cnt (1+ ag-search-cnt))))))
	 (fset 'ag/buffer-name 'ag/buffer-name-fset)
	 ))

;; magit
(setenv "GIT_ASKPASS" "git-gui--askpass") ;解决git push不提示密码的问题
(setenv "SSH_ASKPASS" "git-gui--askpass")
(setenv "GIT_SSH" "c:/Program Files (x86)/PuTTY/plink.exe")
;; 要想保存密码不用每次输入得修改.git-credentials和.gitconfig
;; 解决magit和服务器的乱码问题，不需要在.gitconfig中改118n的配置(比如配置成gb2312)
(defun my-git-commit-hook ()
  (set-buffer-file-coding-system 'utf-8-unix))
(add-hook 'magit-mode-hook 'my-git-commit-hook)
(add-hook 'magit-status-mode-hook 'my-git-commit-hook)
(add-hook 'git-commit-mode-hook 'my-git-commit-hook)

;; (require 'magit)
(autoload 'magit-status "magit" nil t)
(autoload 'magit-dispatch-popup "magit" nil t)
(autoload 'magit-blame "magit" nil t)
(autoload 'magit-log-buffer-file "magit" nil t)

(global-set-key (kbd "C-x g") 'magit-status)
(global-set-key (kbd "C-x M-g") 'magit-dispatch-popup)
(global-set-key (kbd "C-x t g") 'magit-blame)
(global-set-key (kbd "C-x t l") 'magit-log-buffer-file)

(eval-after-load "magit"
  '(progn
	 (defadvice magit-blame-format-time-string (before magit-blame-format-time-strin-bef activate)
	   ""
	   (setq tz 0))))

;; purpose
(autoload 'purpose-mode "window-purpose" nil t)
(global-set-key (kbd "<C-f10>") 'purpose-mode)

;; func args
;; (autoload 'fa-show "function-args" nil t)
;; (autoload 'moo-jump-local "function-args" nil t)

;; (global-set-key (kbd "<M-S-return>") 'fa-show)

;; 星际译王
(defun kid-sdcv-to-buffer (&optional input)
  (interactive "P")
  (let ((word (if mark-active
                  (buffer-substring-no-properties (region-beginning) (region-end))
				(current-word nil t))))
	(if input
		(setq word (read-string (format "Search the dictionary for (default %s): " word)
								nil nil word)))
    
    (set-buffer (get-buffer-create "*sdcv*"))
    (buffer-disable-undo)
    (erase-buffer)
	(message "searching for %s ..." word)

    (let ((process (start-process  "sdcv" "*sdcv*"  "sdcv" "-n" "--utf8-input" "--utf8-output" word)))
      (set-process-sentinel
       process
       (lambda (process signal)
         (when (memq (process-status process) '(exit signal))
           (unless (string= (buffer-name) "*sdcv*")
             (setq kid-sdcv-window-configuration (current-window-configuration))
             (switch-to-buffer-other-window "*sdcv*")
             (local-set-key (kbd "RET") 'kid-sdcv-to-buffer)
             (local-set-key (kbd ",") (lambda ()
                                        (interactive)
										(quit-window t))));; quit-window t 可以关闭窗口并恢复原先窗口布局,但是buffer被kill
           (goto-char (point-min))
		   (open-line 1)))))))

(global-set-key (kbd "<M-f11>") 'kid-sdcv-to-buffer)

;; 显示搜索index
(require 'anzu)
(global-anzu-mode +1)
(setq anzu-search-threshold 200) ;;防止大文件搜索时很卡
(global-set-key (kbd "M-%") 'anzu-query-replace)
(global-set-key (kbd "C-M-%") 'anzu-query-replace-regexp)

;; anzu mode-line不显示括号
(defun anzu--update-mode-line-default-fset (here total)
  (when anzu--state
    (let ((status (cl-case anzu--state
                    (search (format "%s/%d%s"
                                    (anzu--format-here-position here total)
                                    total (if anzu--overflow-p "+" "")))
                    (replace-query (format "%d replace" total))
                    (replace (format "%d/%d" here total)))))
      (propertize status 'face 'anzu-mode-line))))
(fset 'anzu--update-mode-line-default 'anzu--update-mode-line-default-fset)
;; (autoload 'helm-do-pt "helm-pt" nil t)
;; (autoload 'helm-projectile-pt "helm-pt" nil t)

;; tabbar
(require 'tabbar )
(tabbar-mode)
(global-set-key (kbd "<C-tab>") 'tabbar-forward-tab)
(global-set-key (kbd "<C-S-tab>") 'tabbar-backward-tab)

(defun tabbar-ruler-group-user-buffers-helper-dired ()
  (list (cond ((string-equal "*" (substring (buffer-name) 0 1)) "emacs's buffers")
			  (t "user's buffers"))))
(setq tabbar-buffer-groups-function 'tabbar-ruler-group-user-buffers-helper-dired)


(autoload 'swift-mode "swift-mode" nil t)

;; ycmd
;; 文件中不能有当前编码无法识别的字符，否则ycmd会出错
;; 会报(wrong-type-argument number-or-marker-p nil)错误
;; 解决办法：c-x RET f输入utf-8回车，会提示乱码的位置

(autoload 'ycmd-mode "ycmd" nil t)
(autoload 'global-ycmd-mode "ycmd" nil t)

(global-set-key (kbd "M-.") (lambda () "" (interactive)
							  (require 'ycmd )
							  (unless ycmd-mode (ycmd-mode 1))
							  (ycmd-goto)
							  ))
(global-set-key (kbd "M-p") (lambda () "" (interactive)
							  (require 'ycmd )
							  (unless ycmd-mode (ycmd-mode 1))
							  (ycmd-get-type)
							  ))

(global-set-key (kbd "<S-return>") 'company-ycmd)
(global-set-key (kbd "C-.") 'ycmd-get-parent)	 
(global-set-key (kbd "C-c p") 'ycmd-parse-buffer)
(global-set-key (kbd "C-c t") 'ycmd-fixit)

;; -u解决hang的问题
(set-variable 'ycmd-server-command '("python" "-u" "D:/ycmd/ycmd/"))
(set-variable 'ycmd-global-config "~/.ycm_extra_conf.py")
(setq ycmd-extra-conf-handler 'load)
;; (setq ycmd--log-enabled t)
(setq url-show-status nil)
;; (setq ycmd-request-message-level -1)
(setq request-message-level -1)
(defadvice ycmd-goto (before ycmd-goto-mru activate)
  ""
  (message "ycmd-goto")
  (ring-insert semantic-tags-location-ring (point-marker)))

(eval-after-load "ycmd"
  '(progn
	 (message "ycmd")
	 (global-ycmd-mode 1)
	 (require 'company-ycmd)  
	 (company-ycmd-setup)

	 (defun company-ycmd-semantic-complete ()
	   (interactive)
	   (let ((ycmd-force-semantic-completion t))
		 (company-complete)))
	 (global-set-key (kbd "<M-S-return>") 'company-ycmd-semantic-complete)
	 
	 (require 'flycheck-ycmd)
	 ;; 下面函数有bug，由于路径中存在反斜杠导致flycheck的错误无法显示
	 (defun flycheck-ycmd--result-to-error-fset (result checker)
	   "Convert ycmd parse RESULT for CHECKER into a flycheck error object."
	   (let-alist result
		 (when (string-equal (replace-regexp-in-string "\\\\" "/" .location.filepath ) (buffer-file-name))
		   (flycheck-error-new
			:line .location.line_num
			:column .location.column_num
			:buffer (current-buffer)
			:filename .location.filepath
			:message (concat .text (when (eq .fixit_available t) " (FixIt)"))
			:checker checker
			:level (assoc-default .kind flycheck-ycmd--level-map 'string-equal 'error)))))
	 (fset 'flycheck-ycmd--result-to-error 'flycheck-ycmd--result-to-error-fset)
	 (flycheck-ycmd-setup)
	 (flycheck-mode 1)

	 ;; (require 'ycmd-eldoc)
	 ;; (add-hook 'ycmd-mode-hook 'ycmd-eldoc-setup)

	 ;; (setq ycmd-force-semantic-completion t)
	 ))

;; ycmd.el中修改min_num_of_chars_for_completion为2
;; max_diagnostics_to_display要改大

;; hl-anything
(autoload 'hl-highlight-thingatpt-local "hl-anything" nil t)
(autoload 'hl-highlight-thingatpt-global "hl-anything" nil t)
(autoload 'hl-find-next-thing "hl-anything" nil t)
(autoload 'hl-find-prev-thing "hl-anything" nil t)

;; (global-set-key (kbd "<M-f8>") 'hl-highlight-thingatpt-local)
;; (global-set-key (kbd "<f8>") 'hl-find-next-thing)
;; (global-set-key (kbd "<S-f8>") 'hl-find-prev-thing)
;; (global-set-key (kbd "<C-f8>") 'hl-unhighlight-all-local)


(eval-after-load "hl-anything"
  '(progn
	 (hl-highlight-mode 1)
	 (hl-paren-mode 1)
	 (setq hl-highlight-cycle-search t)
	 ))

;; imenu list
(autoload 'imenu-list-minor-mode "imenu-list" nil t)
(eval-after-load "imenu-list"
  '(progn
	 (setq imenu-list-focus-after-activation t)
	 (setq imenu-list-auto-resize t)))
(global-set-key (kbd "M-q") #'imenu-list-minor-mode)

;; spacemacs
(require 'spaceline-config)
;; (spaceline-spacemacs-theme)
;; (spaceline-emacs-theme)
(spaceline-helm-mode 1)
(spaceline-info-mode 1)
(setq anzu-cons-mode-line-p nil)		;防止有两个anzu

;; 用diminish控制minor mode的显示
(require 'diminish)
;; (eval-after-load "auto-complete" '(diminish 'auto-complete-mode))
(eval-after-load "anzu" '(diminish 'anzu-mode))
(eval-after-load "company" '(diminish 'company-mode " Comp"))
(eval-after-load "hideif" '(diminish 'hide-ifdef-mode))
(eval-after-load "hideshow" '(diminish 'hs-minor-mode))
(eval-after-load "helm-gtags" '(diminish 'helm-gtags-mode))
(eval-after-load "irony" '(diminish 'irony-mode))
(eval-after-load "yasnippet" '(diminish 'yas-minor-mode))

;; 鼠标指向dos处时，弹出文件编码信息
(spaceline-define-segment buffer-encoding-abbrev-mouse
  "The line ending convention used in the buffer with mouse prompt of buffer encoding info."
  (let ((buf-coding (format "%s" buffer-file-coding-system)))
    (if (string-match "\\(dos\\|unix\\|mac\\)" buf-coding)
        (setq buf-coding (match-string 1 buf-coding))
      buf-coding)
	(propertize buf-coding
				'help-echo (if buffer-file-coding-system
							   (format "Buffer coding system (%s): %s
mouse-1: Describe coding system
mouse-3: Set coding system"
									   (if enable-multibyte-characters "multi-byte" "unibyte")
									   (symbol-name buffer-file-coding-system))
							 "Buffer coding system: none specified"))))

;; 让which-func强制刷新
(spaceline-define-segment which-function-ignore-active
  (when (bound-and-true-p which-function-mode)
    (let* ((current (format-mode-line which-func-current)))
      (when (string-match "{\\(.*\\)}" current)
        (setq current (match-string 1 current)))
      (propertize current
                  'local-map which-func-keymap
                  'face 'which-func
                  'mouse-face 'mode-line-highlight
                  'help-echo "mouse-1: go to beginning\n\
mouse-2: toggle rest visibility\n\
mouse-3: go to end"))))

;; 自定义theme使用上面两个segment
(defun spaceline--theme-mod (left second-left &rest additional-segments)
  "Convenience function for the spacemacs and emacs themes."
  (spaceline-install `(,left
					   anzu
					   auto-compile
					   ,second-left
					   major-mode
					   (process :when active)
					   ((flycheck-error flycheck-warning flycheck-info)
						:when active)
					   (minor-modes :when active)
					   (mu4e-alert-segment :when active)
					   (erc-track :when active)
					   (version-control :when active)
					   (org-pomodoro :when active)
					   (org-clock :when active)
					   nyan-cat)

					 `(which-function-ignore-active
					   (python-pyvenv :fallback python-pyenv)
					   (battery :when active)
					   selection-info
					   input-method
					   ((buffer-encoding-abbrev-mouse
						 point-position
						 line-column)
						:separator " | ")
					   (global :when active)
					   ,@additional-segments
					   buffer-position
					   hud))

  (setq-default mode-line-format '("%e" (:eval (spaceline-ml-main)))))

(defun spaceline-emacs-theme-mod (&rest additional-segments)
  "Install a modeline close to the one used by Spacemacs, but which
looks better without third-party dependencies.

ADDITIONAL-SEGMENTS are inserted on the right, between `global' and
`buffer-position'."
