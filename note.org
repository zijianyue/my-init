#+OPTIONS: "\n:t"
#+ATTR_LATEX: :environment cn-article
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [UTF8,a4paper]
#+LATEX_HEADER: \usepackage[BoldFont,SlantFont,CJKsetspaces,CJKchecksingle]{xeCJK}
#+LATEX_HEADER: \XeTeXlinebreaklocale "zh"
#+LATEX_HEADER: \XeTeXlinebreakskip = 0pt plus 1pt
#+LATEX_HEADER: \setmainfont[Mapping=tex-text]{Times New Roman}
#+LATEX_HEADER: \setsansfont[Mapping=tex-text]{Arial}
#+LATEX_HEADER: \setmonofont{Courier New}
#+LATEX_HEADER: \setCJKmainfont{DFKai-SB}
#+LATEX_HEADER: \setCJKmonofont{MingLiU}
#+LATEX_HEADER: \usepackage{listings}


#+LATEX_HEADER: \tolerance=1000
#+LATEX_HEADER: \date{\today}
#+LATEX_HEADER: \title{Org导出中文PDF}
* emacs
** srecode编辑模式C-c c-c是确认修改生效
** dired中S即dired-do-symlink可以给exe创建快捷方式（symlink or soft link），并放到指定位置。
** 插件修改

*** CEDET的修改：
  
**** 1 修改cedet-global.el，添加
 		      ((eq texttype 'regexp)
 		       "g")
+              ((eq texttype 'symbolname)
+               "s")
**** 2 在ect/srecode中修改c.srt和doc-cpp.srt
**** 3 到.emacs.d下把srecode-map.el删除
**** 4 list.el 中semantic-symref-produce-list-on-results
(semantic-symref-result-get-tags res nil)
这个是控制要不要把symref的文件都打开(原来是传t，改为nil)
**** 5 symref会过滤.h中的项是semantic-symref-result-get-tags中做的,对该函数做如下修改（详细见symbre.el）

		   ;; 找不到tag时，使用which-fuction匹配本文件所有tag来查找
		   (unless tag
			 (let ((foundFlag-p nil )
				   (i 0))

			   (while (and
					   (not foundFlag-p)
					   (<= i (length tagList)))

				 ;; if found, set foundFlag-p
				 
				 (when (equal (semantic-tag-name (elt tagList i)) whichFunc)
				   (setq foundFlag-p t )
				   (setq tag (elt tagList i)))

				 (setq i (1+ i))))
			   )

**** 6 symref把行号加上
修改semantic-symref-rb-toggle-expand-tag
	    (insert-button (format "[%s] %s" (car hits) (car text))

**** 7 symref 重命名时对于semantic-symref-anything不好使，要修改list.el
在semantic-symref-list-map-open-hits中修改
	      (while (re-search-forward oldsym (point-at-eol) t)

**** 8 修改semantic-symref-anything 注释会被过滤的问题
  ;; 再找不到就创建一个空tag
			   (unless tag
				 (setq tag (semantic-tag "/* COMMENT */" 'variable))
				 (semantic--tag-put-property tag :filename (buffer-file-name)))


*** helm-files.el的修改
;; (require 'dired-x)

*** nlinum.el的修改
(defun nlinum--setup-window ()
  (let ((width (if (display-graphic-p)
                   (ceiling
                    (let ((width (nlinum--face-width 'linum)))
                      (if width
                          (/ (* nlinum--width 1.0 width)
                             (frame-char-width))
                        (/ (* nlinum--width 1.0
                              (nlinum--face-height 'linum))
                           (frame-char-height)))))
                 nlinum--width)))
    (set-window-margins nil (if nlinum-mode (if (< nlinum--width width)
												width
											  nlinum--width))
                        (cdr (window-margins)))))

*** comment-box功能
给代码加上块注释

*** <M-home>和<M-end>可以将其他窗口的光标移到开始或结尾

** dynamic-library-alist显示依赖的dll
** buffer中插入变量值 
(insert (format "[%s] " (car hits)))
** 查看diff时，apply hunk可以把变更给取消
** 搭建emacs编译环境时
把C:\MinGW\msys\1.0\etc下的fstab.sample改名为fstab
XPM源码中的simx.h和xpm.h复制到C:\MinGW\include\X11下
** How to Undo the Unpushed Commits in Magit?
In Magit buffer *magit: ..*,

Hit x
Select origin/master
Above action will undo all the commits that haven’t been pushed to github.com. It will still preserve the modified states of the yet-to-be staged/committed files.

** magit部分提交修改
用tab展开修改，假如有多个hunk，在要提交的hunk上stage（s键），如果失败可能是无法单独提交该hunk

* git
** git避免输入用户名密码
HOME目录下创建.git-credentials

内容是 https://zijianyue:gzjsy1314@github.com

然后进入shell

git config --global credential.helper store

查看.gitconfig文件，会多了一项：

[credential]

    helper = store
    
** git的PATH设置
安装官方git，选路径时选第2个，即把git/cmd/添加到PATH中，这样就可以使用git命令
又不会引起其他命令的混乱

** git push 前要先打开pageant并加载指定ppk文件，对于SSH下载下来的文件这样才能push成功

* 其他
** pscp problem when called from bash 

Hi,
using pscp from "cmd" in Windows woks well but when it is used from bash, host:path is not correctly interpreted, it needs to add an additional / before the path to be well interpreted.
For example:
pscp -v myFile mylogin@myHost:/tmp/myDir
gives messages
Looking up host "myHost;C"
ssh_init: Host does not exist

pscp -v myFile mylogin@myHost://tmp/myDir
works well (with message
Looking up host "myHost")

** psftp get 和 put时local dir就是起psftp命令时的目录
可以用lpwd显示，也可以用lcd \path\to\new\dir修改
** 安装pygments
先安装python 2.7 或 3.4
再打开cmd 切换到pygments根目录执行c:\python34\python.exe setup.py install即可，有可能得先下载setuptools
确认版本
C:\Users\g00280886>C:\Python34\Scripts\pygmentize.exe -V
Pygments version 2.1, (c) 2006-2015 by Georg Brandl.

** win7拒绝访问sendto文件夹
在我的电脑的地址栏输入shell:sendto即可

*.dir-locals.el具体实现有关函数hack-dir-local-variables
* c-forward-conditional是#if #end之间移动，不能带else，c-up-conditional是不同深度的#之间内外移动，可以带else
* sdcv词典放的位置 ~\.stardict\dic
* cscope处理不了文件中有extern c
* 编译rtags要在cygwin中装cmake openssl-dev libclang-static ncurse make.
* cygwin中装libglib是给sdcv用的
* m-q 自动换行的用法
先设置(setq-default fill-column 80)，或者用快捷键c-x f，然后选中一段文字m-q

* ycmd编译
系统需求：CMAKE PYTHON34或27
下载ycmd和third-party(这个目录在运行ycmd后会有python lib的cache，比如python3的，如果直接拷贝使用的话，比如ycm_core.pyd是python2编译出来的，就会报错：Ycmd error: ycm_core library compiled for Python 2 but loaded in Python 3.)
在ycmd下新建目录ycmd-build，进去后起命令行cmake -G "Visual Studio 14" -DPATH_TO_LLVM_ROOT="C:/Program Files (x86)/LLVM" -DUSE_PYTHON2=ON . ../cpp，成功后会生成一个VS的工程，用VS打开后编译 ycm_core ，成功后会在ycmd根目录下生成 ycm_core.pyd 和 libclang.dll ，这样emacs-ycmd就能用了
如果有c++ runtime error 把C:\Program Files\CMake\bin下的msvcp120.dll和msvcr120.dll改名(C:\Program Files\ImageMagick-6.9.1-Q16下还有一份)，保证全局只有一份


* python笔记

** 原始数据类型分类
数据类型 存储模型 更新模型 访问模型
数字     Scalar   不可更改 直接访问
字符串   Scalar   不可更改 顺序访问
列表     Container 可更改  顺序访问
元组     Container 不可更改 顺序访问
字典     Container 可更改  映射访问

** 重点摘抄
Python 对像都拥有三个特性：身份，类型和值

* 26.1 sdcv不可用，需要把.stardict目录放到cygwin\home目录下
* 26.1 .bashrc不生效，需要把.bashrc放到C:\MinGW\msys\1.0\home目录下
