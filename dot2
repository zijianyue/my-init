
;; 选中单位
(autoload 'er/expand-region "expand-region" nil t)
(global-set-key (kbd "M-s") 'er/expand-region)

;; undo redo
(require 'redo+)
(setq undo-no-redo t)
(global-set-key (kbd "C-/") 'redo)

;; stl(解析vector map等)
(setq stl-base-dir "c:/Program Files (x86)/Microsoft Visual Studio 8/VC/include")
(setq stl-base-dir-12 "c:/Program Files (x86)/Microsoft Visual Studio 12.0/VC/include")
(setq stl-base-dir-11 "c:/Program Files (x86)/Microsoft Visual Studio 11.0/VC/include")

;; 设置成c++文件类型
(add-to-list 'auto-mode-alist (cons stl-base-dir 'c++-mode))
(add-to-list 'auto-mode-alist (cons stl-base-dir-12 'c++-mode))
(add-to-list 'auto-mode-alist (cons stl-base-dir-11 'c++-mode))
;; (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.hpp\\'" . c++-mode))

;; 工程设置
(defun create-spec-ede-project (root-file known)
  (if known
	  (ede-cpp-root-project "code" :file root-file
							:include-path '( "/include" "/server" "/upf"
											 "/upf_dubhe/export" "/UPF_SMI/Include" "/Service/TG/MM/RM/Source/PMM")
							:spp-files '( "Service/TG/MM/RM/Source/PMM/RMPmm_Const.h"
										  "Service/TG/MM/RM/Include/RM_switch.h"
										  "Service/TG/MM/RM/Include/RM_Debug.h"
										  "ede_switch.h" ;ON OFF宏写成(1)(0)的话不能识别
										  )
							:spp-table '(("IN" . "")
										 ("OUT" . "")
										 ("INOUT" . "") ;如果在函数参数前加上这样的宏会导致无法识别
										 ))
	(ede-cpp-root-project "code" :file root-file)))

(defun create-known-ede-project(&optional select)
  (interactive "P")
  (if select
	  (setq root-file (read-file-name "Open a root file in proj: "))
	(setq root-file "./GTAGS"))
  (create-spec-ede-project root-file t)
  ;; (find-sln root-file)
  ;; (cscope-set-initial-directory (file-name-directory root-file))
  (message "Known EDE Project Created." ))

(defun create-unknown-ede-project(&optional select)
  (interactive "P")
  (if select
	  (setq root-file (read-file-name "Open a root file in proj: "))
	(setq root-file "./GTAGS"))
  (create-spec-ede-project root-file nil)
  ;; (find-sln root-file)
  ;; (cscope-set-initial-directory (file-name-directory root-file))
  (message "UnKnown EDE Project Created." ))

(global-set-key (kbd "C-c e") 'create-known-ede-project)
(global-set-key (kbd "C-c u") 'create-unknown-ede-project)

(create-spec-ede-project "e:/projects/tempspace/test4c/GTAGS" nil)
(create-spec-ede-project "e:/projects/eNavi2_800X480_ChangeUI/GTAGS" t)
(create-spec-ede-project "e:/projects/Clarion_13MY_Dev_For_MM/GTAGS" t)


;;auto-complete
(require 'auto-complete-config)
(setq ac-fuzzy-enable t)
(require 'pos-tip)
(setq ac-quick-help-prefer-pos-tip t)
(setq ac-trigger-commands
      (cons 'backward-delete-char-untabify ac-trigger-commands))
(setq ac-trigger-commands
      (cons 'autopair-backspace ac-trigger-commands))
(global-set-key (kbd "C-x /") 'ac-complete-filename)
(global-set-key (kbd "M-RET") 'auto-complete)

(defadvice ac-cc-mode-setup(after my-ac-setup activate)
  (setq-local ac-sources (delete 'ac-source-gtags ac-sources))
  (setq-local ac-sources (delete 'ac-source-words-in-same-mode-buffers ac-sources))
  (setq-local ac-sources (delete 'ac-source-abbrev ac-sources))
  ;; (setq-local ac-sources (append '(ac-source-c-headers) ac-sources))
  ;; (setq-local ac-sources (append '(ac-source-irony) ac-sources))
  (setq-local ac-sources (append '(ac-source-semantic) ac-sources))
  (setq-local ac-sources (append '(ac-source-semantic-raw) ac-sources)) ;;会干扰->成员的补全
  ;; (setq-local ac-sources (append '(ac-source-imenu) ac-sources)) ;;会干扰->成员的补全
  )

(eval-after-load "auto-complete-config"
  '(progn
	 ;; (require 'ac-irony)
	 ;; (message "auto-complete-config")

	 ;; (define-key ac-mode-map  (kbd "M-RET") 'auto-complete)
	 (define-key ac-completing-map  (kbd "M-s") 'ac-isearch)

	 (ac-config-default)
	 
	 (add-to-list 'ac-modes 'objc-mode)

	 ;; (setq-default ac-sources '(ac-source-dictionary ac-source-words-in-same-mode-buffers))
	 ;; (setq-default ac-sources '(ac-source-dictionary))
	 ;; (define-key irony-mode-map (kbd "M-p") 'ac-complete-irony-async)
	 ))

;; company
(autoload 'company-mode "company" nil t)
(eval-after-load "company"
  '(progn
	 (require 'company-irony nil t )
	 (setq company-async-timeout 15)
	 ;; (add-hook 'after-init-hook 'global-company-mode)
	 (add-to-list 'company-backends 'company-irony)
	 (add-hook 'irony-mode-hook 'company-irony-setup-begin-commands)
	 ;; (global-set-key (kbd "<S-return>") 'company-complete-common)
	 (global-set-key (kbd "<C-S-return>") 'company-irony)

	 (define-key company-active-map (kbd "<tab>") 'company-complete-common-or-cycle)
	 (define-key company-active-map (kbd "M-s") 'company-filter-candidates)
	 (defun toggle-company-complete-id (&optional args)
	   (interactive "P")
	   (message "company complete id afte %s char" args)
	   (if args
		   (setq-local company-minimum-prefix-length args)
		 (progn
		   (if (eq company-minimum-prefix-length 99)
			   (progn
				 (setq-local company-minimum-prefix-length 3))
			 (progn
			   (setq-local company-minimum-prefix-length 99))))
		 ))
	 ;; 删除时也补全
	 ;; (setq company-begin-commands
	 ;; 	   (cons 'backward-delete-char-untabify company-begin-commands))
	 ;; (setq company-begin-commands
	 ;; 	   (cons 'autopair-backspace company-begin-commands))
	 ;; (add-to-list 'company-backends 'company-c-headers)
	 ))

;;yasnippet
(autoload 'yas-global-mode "yasnippet" nil t)
(autoload 'yas-minor-mode "yasnippet" nil t)
(setq yas-snippet-dirs (concat site-lisp-dir "\\yasnippet\\snippets"))

(setq yas-glo-on nil)
(defun yas-glo-on ()
  (interactive "P")
  (unless yas-glo-on (yas-global-mode 1))
  (setq yas-glo-on t)
  )

;; sln解析
(autoload 'find-sln "sln-mode" nil t)
(eval-after-load "project-buffer-mode"
  '(progn
	 (require 'project-buffer-mode+)
	 (project-buffer-mode-p-setup)
	 (require 'project-buffer-occur)
	 (define-key project-buffer-mode-map [?r] 'project-buffer-occur);; 要想全局搜索需要加C-u
	 (define-key project-buffer-mode-map [?m] 'project-buffer-occur-case-sensitive)
	 ;; (define-key global-map (kbd "<M-f6>") 'project-buffer-mode-p-go-to-attached-project-buffer)
	 ;; (define-key global-map (kbd "<C-f6>") 'project-buffer-mode-p-run-project-buffer-build-action)
	 ))

(global-set-key (kbd "C-c l") 'find-sln)

;; 前进、后退
(require 'recent-jump-small)
(setq rjs-mode-line-format nil)
(recent-jump-small-mode)
(global-set-key (kbd "<M-left>") 'recent-jump-small-backward)
(global-set-key (kbd "<M-right>") 'recent-jump-small-forward)
;; (add-to-list 'rjs-command-ignore 'mwheel-scroll)
(add-to-list 'rjs-command-ignore 'mouse-drag-region)

(defvar rjs-command-ignore-last
  '(recent-jump-backward
    recent-jump-forward
    recent-jump-small-backward
    recent-jump-small-forward
	mwheel-scroll
	mouse-drag-region))

(defun is-mwheeling()
  (and (eq last-command 'mwheel-scroll) (eq this-command 'mwheel-scroll)))

(defun uninterested-buffer (buffer &optional all)
  (if all
	  (or (eq (buffer-local-value 'major-mode buffer) 'dired-mode)
		  (string-match-p "\*" (buffer-name buffer)))
	(or (eq (buffer-local-value 'major-mode buffer) 'ag-mode)
		(eq (buffer-local-value 'major-mode buffer) 'semantic-symref-results-mode)
		(eq (buffer-local-value 'major-mode buffer) 'diff-mode)
		(eq (buffer-local-value 'major-mode buffer) 'vc-dir-mode)
		(eq (buffer-local-value 'major-mode buffer) 'vc-svn-log-view-mode)
		(eq (buffer-local-value 'major-mode buffer) 'ediff-meta-mode)
		(eq (buffer-local-value 'major-mode buffer) 'occur-mode)
		(eq (buffer-local-value 'major-mode buffer) 'Custom-mode)
		(eq (buffer-local-value 'major-mode buffer) 'help-mode)	
		(string-match-p "ag dired pattern" (buffer-name buffer))
		(string-match-p "\*vc\*" (buffer-name buffer))
		(string-match-p "\*Backtrace\*" (buffer-name buffer))
		(string-match-p "\*Completions\*" (buffer-name buffer))
		(string-match-p "\*Cedet\*" (buffer-name buffer))
		(string-match-p "\*Annotate\*" (buffer-name buffer))
		(string-match-p "\*Compile-Log\*" (buffer-name buffer))
		(string-match-p "\*GTAGS SELECT\*" (buffer-name buffer))
		(string-match-p "\*Calc\*" (buffer-name buffer))
		(string-match-p "\*magit" (buffer-name buffer))
		)))

(defun rjs-pre-command-fset ()
  "每个命令执行前执行这个函数"
  (unless (or (active-minibuffer-window) isearch-mode (uninterested-buffer (current-buffer) t) (is-mwheeling))
    (unless (memq this-command rjs-command-ignore)
      (let ((position (list (buffer-file-name) (current-buffer) (point))))
		;; (princ (format " this %S pos:%S" this-command position))
        (unless rjs-position-before
          (setq rjs-position-before position))
        (setq rjs-position-pre-command position))
      (if (memq last-command '(recent-jump-small-backward recent-jump-small-forward))
          (progn
            (let ((index (1- rjs-index)) (list nil))
              (while (> index 0)
                (push (ring-ref rjs-ring index) list)
                (setq index (1- index)))
              (while list
                (ring-insert rjs-ring (car list))
                (pop list))))))))


(defun rjs-post-command-fset ()
  "每个命令执行后执行这个函数"
  (unless (or (active-minibuffer-window) isearch-mode (uninterested-buffer (current-buffer) t) (is-mwheeling))
	(unless (memq this-command rjs-command-ignore)
	  (let ((position (list (buffer-file-name) (current-buffer) (point))))
		;; (princ (format " last %S this %S pos:%S pre:%S before:%S" last-command this-command position rjs-position-pre-command rjs-position-before))
		(if (eq this-command 'mwheel-scroll)
			(rj-insert-point rjs-ring position))
		(if (or (and rjs-position-pre-command
					 (rj-insert-big-jump-point rjs-ring rjs-line-threshold rjs-column-threshold rjs-position-pre-command position rjs-position-pre-command))
				(and rjs-position-before
					 (rj-insert-big-jump-point rjs-ring rjs-line-threshold rjs-column-threshold rjs-position-before position rjs-position-before)))
			(setq rjs-position-before nil)))))
  (setq rjs-position-pre-command nil))

(defun recent-jump-small-backward-fset (arg)
  "跳到命令执行前的位置"
  (interactive "p")
  (let ((index rjs-index)
        (last-is-rjs (memq last-command '(recent-jump-small-backward recent-jump-small-forward))))
    (if (ring-empty-p rjs-ring)
        (message (if (> arg 0) "Can't backward, ring is empty" "Can't forward, ring is empty"))
      (if last-is-rjs
          (setq index (+ index arg))
        (setq index arg)
		(unless (uninterested-buffer (current-buffer) t)
		  (unless (memq last-command rjs-command-ignore-last)
			(let ((position (list (buffer-file-name) (current-buffer) (point))))
			  (setq rj-position-before nil)
			  (unless (rj-insert-big-jump-point rjs-ring rjs-line-threshold rjs-column-threshold (ring-ref rjs-ring 0) position)
				(ring-remove rjs-ring 0)
				(ring-insert rjs-ring position))))))
      (if (>= index (ring-length rjs-ring))
          (message "Can't backward, reach bottom of ring")
        (if (<= index -1)
            (message "Can't forward, reach top of ring")
          (let* ((position (ring-ref rjs-ring index))
				 (file (nth 0 position))
				 (buffer (nth 1 position)))
            (if (not (or file (buffer-live-p buffer)))
                (progn
                  (ring-remove rjs-ring index)
                  (message "要跳转的位置所在的buffer为无文件关联buffer, 但该buffer已被删除"))
              (if file
                  (find-file (nth 0 position))
                (assert (buffer-live-p buffer))
                (switch-to-buffer (nth 1 position)))
              (goto-char (nth 2 position))
              (setq rjs-index index))))))))

(fset 'rjs-pre-command 'rjs-pre-command-fset)
(fset 'rjs-post-command 'rjs-post-command-fset)
(fset 'recent-jump-small-backward 'recent-jump-small-backward-fset)

;; bookmark
(autoload 'bm-toggle   "bm" "Toggle bookmark in current buffer." t)
(autoload 'bm-next     "bm" "Goto bookmark."                     t)
(autoload 'bm-previous "bm" "Goto previous bookmark."            t)
(autoload 'bm-toggle-cycle-all-buffers "bm" nil  t)

(global-set-key (kbd "<C-f2>") 'bm-toggle)
(global-set-key (kbd "<f2>")   'bm-next)
(global-set-key (kbd "<S-f2>") 'bm-previous)
(setq bm-cycle-all-buffers t)
(defface bm-face
  '((((class grayscale)
      (background light)) (:background "DimGray"))
    (((class grayscale)
      (background dark))  (:background "LightGray"))
    (((class color)
      (background light)) (:background "peach puff"))
    (((class color)
      (background dark))  (:background "dark slate gray")))
  "Face used to highlight current line."
  :group 'bm)

;; 更多的语法高亮
(defface zjl-c-hl-function-call-face
  '((t (:foreground "SpringGreen4" :bold t)))
  "*Face used for link privilege indicator (l) in dired buffers."
  :group 'zjl-c-faces)
(defvar zjl-c-hl-function-call-face 'zjl-c-hl-function-call-face)


;; 显示列竖线
(autoload 'fci-mode "fill-column-indicator" "" t)
(global-set-key (kbd "C-:") 'fci-mode)
(setq fci-rule-column 120)
;; (defun fci-all-window-refresh ()
;;   (setq proced-buf-list nil)	;保存已经处理过的buf
;;   (walk-windows
;;    #'(lambda (w)
;; 	   (select-window w)
;; 	   (if (or (eq major-mode 'c-mode)
;; 			   (eq major-mode 'c++-mode))
;; 		   (progn 
;; 			 (unless (and (memq (window-buffer) proced-buf-list)
;; 						  (>= (window-width w) fci-rule-column))
;; 			   (push (window-buffer) proced-buf-list)
;; 			   (turn-on-fci-mode)
;; 			   (if (< (window-width w) fci-rule-column)
;; 				   (turn-off-fci-mode))))))
;;    0))
(eval-after-load "fill-column-indicator"
  '(progn
	 ;; 避免破坏 auto complete
	 (defun sanityinc/fci-enabled-p () (symbol-value 'fci-mode))

	 (defvar sanityinc/fci-mode-suppressed nil)
	 (make-variable-buffer-local 'sanityinc/fci-mode-suppressed)

	 (defadvice popup-create (before suppress-fci-mode activate)
	   "Suspend fci-mode while popups are visible"
	   (let ((fci-enabled (sanityinc/fci-enabled-p)))
		 (when fci-enabled
		   (setq sanityinc/fci-mode-suppressed fci-enabled)
		   (turn-off-fci-mode))))

	 (defadvice popup-delete (after restore-fci-mode activate)
	   "Restore fci-mode when all popups have closed"
	   (when (and sanityinc/fci-mode-suppressed
				  (null popup-instances))
		 (setq sanityinc/fci-mode-suppressed nil)
		 (turn-on-fci-mode)))

	 ;; 避免和company冲突
	 (defvar-local company-fci-mode-on-p nil)

	 (defun company-turn-off-fci (&rest ignore)
	   (when (boundp 'fci-mode)
		 (setq company-fci-mode-on-p fci-mode)
		 (when fci-mode (fci-mode -1))))

	 (defun company-maybe-turn-on-fci (&rest ignore)
	   (when company-fci-mode-on-p (fci-mode 1)))

	 (add-hook 'company-completion-started-hook 'company-turn-off-fci)
	 (add-hook 'company-completion-finished-hook 'company-maybe-turn-on-fci)
	 (add-hook 'company-completion-cancelled-hook 'company-maybe-turn-on-fci)

	 ;; 根据窗口分割情况刷新FCI

	 ;; (defadvice split-window-right (after split-window-right-fci activate)
	 ;;   ""
	 ;;   (fci-all-window-refresh))

	 ;; (defadvice delete-other-windows (after delete-other-windows-fci activate)
	 ;;   ""
	 ;;   (fci-all-window-refresh))

	 ;; (defadvice mouse-delete-window (after mouse-delete-window-fci activate)
	 ;;   ""
	 ;;   (fci-all-window-refresh))

	 ;; (defadvice delete-window (after delete-window-fci activate)
	 ;;   ""
	 ;;   (fci-all-window-refresh))

	 ;; (defadvice switch-to-buffer (after switch-to-buffer-fci activate)
	 ;;   ""
	 ;;   (fci-all-window-refresh))
	 ))
;; 异步copy rename文件
(autoload 'dired-async-mode "dired-async.el" nil t)

;; helm系列
